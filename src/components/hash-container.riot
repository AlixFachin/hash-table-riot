<hash-container>
    <div class="hash-container-panel">
        <div class="control-panel">
            <p class="help"> The aim is to store (key, value) pairs. 
			<br>The value will be determined by random. You can choose the hash function to try to optimize the result.
            (Optimized result is when it takes the least amount of time to look for a value associated with a key, i.e. 
            when the values are uniformally distributed accross the table) <br>
            HashTableの目標は(Key,Value)のペアーを効果的に保存すること。<br>
            以下の図はKeyを入力すると、Valueはランダムに決定されています。KeyはHashFunctionによってテーブルの位置を決まってます。<br>
            HashTableのデザインの目標は各列の長さを平等にすること。(そうすれば探し時間は割と短くなります).
            )
            
            </p>

            <label id="keyInputLbl">Key Input</label>
            <input id="keyInput" onkeyup={fieldEdit} value={ state.newItemValue } />
            <button id="keyInputBtn" onclick={ addValue }>Add</button>
            <label id="hashInputLbl">Hash Function </label>
            <div id="radioGroupHash">
                <label>String Length</label>
                <input type="radio" name="hashFunction" id="hashLength" value="length" checked>
                <label>Char Code sum</label>
                <input type="radio" name="hashFunction" id="hashSumCode" value="sumcode">
            </div>
            <button id="resetBtn" onclick={tableReset}>Reset Table</button>
        </div>

        <hash-row each={ (row,index) in state.hashArray }  index={index} rowContent={row}>
        </hash-row>
    </div>

    <style>
        .hash-container-panel {
            width: 95%;
            background-color: rgba(255,255,255,0.55);
            -webkit-backdrop-filer: blur(10px);
            backdrop-filter: blur(10px);
            border-radius: 5px;
            padding: 2em;
            font-size: clamp(11px, 3vw,16px);
        }

        .control-panel {
            display: grid;
            grid-template-areas: 
            "help help help"
            "label1 field1 button1"
            "label2 radiofield radiofield"
            ". resetBtn .";
            grid-template-columns: 1fr 2fr 1fr;
            gap: 1em 5px;
        }

        @media( max-width: 500px) {
            .control-panel {
                grid-template-areas:
                "help help"
                "label1 ."
                "field1 button1"
                "label2 ."
                "radiofield radiofield"
                "resetBtn resetBtn";
                grid-template-columns: 2fr 1fr;

            }
        }
        p.help {
            font-size: small;
            grid-area: help;
        }
        #keyInputLbl {
            grid-area: label1;
            text-align:right;
        }
        #keyInput {
            grid-area: field1;
            margin-right: 1em;
        }
        #keyInputBtn {
            grid-area: button1;
        }

        #hashInputLbl {
            grid-area: label2;
            text-align: right;
        }
        #radioGroupHash {
            grid-area: radiofield;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #radioGroupHash > input {
            margin-right: 2em;
            margin-left: 0.5em;
        }

        #resetBtn {
            grid-area: resetBtn;
        }

    </style>

    <script>
        import HashRow from "./hash-row.riot";

        export default function HashContainer() {

            return {
                components: {
                    HashRow,
                },
                state: {
                    hashArray: [],
                    hashLength: 10,
                    newItemValue: '',
                },
                getHashValue(newKey, arrayLength) {
                    if (this.$('#hashLength').checked) {
                        return (newKey.length % arrayLength)
                    } else {
                        let hashValue = 0;
                        for (let x in newKey) {
                            hashValue += newKey.charCodeAt(x);
                        }
                        console.log(`hash value: ${hashValue}`);
                        return (hashValue % arrayLength)
                    }
                },
                onBeforeMount(props, state ) {
                    this.state.hashLength = props.hashLength || 10;
                    this.state.hashArray = [];
                    for (let i = 0; i < this.state.hashLength; i++) {
                        this.state.hashArray.push([]);
                    }
                },
                fieldEdit(e) {
                    if (e.keyCode === 13) {
                        e.preventDefault();
                        this.addValue();
                        this.update( {newItemValue: ''} );
                    } else {
                        this.update( { newItemValue: e.target.value  })
                    }
                },
                addValue() {
                    console.log("Trying to be there???")
                    // getting the hash of newItemValue;
                    const newHashValue = this.getHashValue(this.state.newItemValue, this.state.hashLength);
                    // inserting the item at the proper column
					/* eslint-disable no-undef */
                    const newItem = {
                        key: DOMPurify.sanitize(this.state.newItemValue),
                        value: Math.floor(Math.random() * 200),
                    };
					/* eslint-enable no-undef */
                    this.state.hashArray[newHashValue].push(newItem);
                    this.update( { hashArray: this.state.hashArray  } );
                },
                tableReset() {
                    console.log('RESET!')
                    this.state.hashArray = [];
                    for (let i = 0; i < this.state.hashLength; i++) {
                        this.state.hashArray.push([]);
                    }
                    this.update( { hashArray: this.state.hashArray  } );
                },
            }
        }

    </script>

</hash-container>
