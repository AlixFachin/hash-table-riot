{"version":3,"file":"app.bundle.js","mappings":";+FAIQ,SAAWA,EAASC,EAAMC,GAAK,aAErC,SAASC,EAAuBC,GAAK,OAAOA,GAAkB,iBAANA,GAAkB,YAAaA,EAAIA,EAAI,CAAE,QAAWA,GAE5G,IAAIC,EAA0BF,EAAsBD,GAEpD,MAAM,WAAEI,GAAeL,EAAKM,IACtB,gCAAEC,GAAoCP,EAAKM,GAAGE,QAEpD,SAASC,EAAOC,GACd,MAAM,KAACC,GAAQD,EAEf,OAAKC,EAKEP,EAAoB,QAAE,GAAGO,UAAaA,MAASC,KAAIC,IACxD,MAAMC,EAASD,EAAGN,GAGlB,IAAKO,EAAQ,OAGbA,EAAOC,SAAQ,GAEfV,EAAWW,OAAOL,GAGlB,MAAMM,EAASjB,EAAKkB,UAAUR,EAAfV,CAA6Ba,EAAIC,EAAOK,OAGvD,OAFAF,EAAOG,OAAON,EAAOO,OAEdJ,MAnBPK,QAAQC,KAAK,4CACN,IAsBXxB,EAAQyB,QAAUf,EAClBV,EAAQU,OAASA,EAEjBgB,OAAOC,eAAe3B,EAAS,aAAc,CAAE4B,OAAO,IA1CSC,CAAQ7B,EAAS,EAAQ,IAAS,EAAQ,yrDCiH/F,MAAO,CACH8B,WAAY,CACRC,QAAO,WAEXT,MAAO,CACHU,UAAW,GACXC,WAAY,GACZC,aAAc,IAElBC,aAAaC,EAAQC,GACjB,GAAIC,KAAKpC,EAAE,eAAeqC,QACtB,OAAQH,EAAOI,OAASH,EACrB,CACH,IAAII,EAAY,EAChB,IAAK,IAAIC,KAAKN,EACVK,GAAaL,EAAOO,WAAWD,GAGnC,OADAnB,QAAQqB,IAAI,eAAeH,KACnBA,EAAYJ,IAG5BQ,cAAczB,EAAOE,GACjBgB,KAAKhB,MAAMW,WAAab,EAAMa,YAAc,GAC5CK,KAAKhB,MAAMU,UAAY,GACvB,IAAK,IAAIc,EAAE,EAAGA,EAAER,KAAKhB,MAAMW,WAAYa,IACnCR,KAAKhB,MAAMU,UAAUe,KAAK,KAGlCC,UAAU5C,GACY,KAAdA,EAAE6C,SACF7C,EAAE8C,iBACFZ,KAAKa,WACLb,KAAKjB,OAAQ,CAACa,aAAc,MAE5BI,KAAKjB,OAAQ,CAAEa,aAAc9B,EAAEgD,OAAOxB,SAG9CuB,WAEI,MAAME,EAAef,KAAKH,aAAaG,KAAKhB,MAAMY,aAAcI,KAAKhB,MAAMW,YAErEqB,EAAU,CACZC,IAAKC,UAAUC,SAASnB,KAAKhB,MAAMY,cACnCN,MAAO8B,KAAKC,MAAoB,IAAdD,KAAKE,WAE3BtB,KAAKhB,MAAMU,UAAUqB,GAAcN,KAAKO,GACxChB,KAAKjB,OAAQ,CAAEW,UAAWM,KAAKhB,MAAMU,aAEzC6B,WAAWzD,GACPmB,QAAQqB,IAAI,UACZN,KAAKhB,MAAMU,UAAY,GACvB,IAAK,IAAIc,EAAE,EAAGA,EAAER,KAAKhB,MAAMW,WAAYa,IACnCR,KAAKhB,MAAMU,UAAUe,KAAK,IAE9BT,KAAKjB,OAAQ,CAAEW,UAAWM,KAAKhB,MAAMU,y2CA1JfgB,wDAAmB1B,MAAMY,wIACpBiB,oIAQJU,8HAGlC,8FAAyDC,0EAAmBC,4jBCLzEzC,MAAO,CACH0C,WAAY,GACZC,aAAc,IAElBpB,cAAczB,EAAOE,GACjBgB,KAAKhB,MAAM0C,WAAaR,UAAUC,SAASrC,EAAM4C,YACjD1B,KAAKhB,MAAM2C,aAAeT,UAAUC,SAASrC,EAAM6C,8PA1B3C3C,MAAM0C,iJACJ1C,MAAM2C,yMCuC5B,MAAMC,EAAY,CAAE,EAAM,GAAI,EAAM,GAAI,EAAM,yhBAG1C,MAAO,CACHpC,WAAY,CACRqC,YAAW,WAEf7C,MAAO,CACHwC,MAAO,EACPM,SAAU,IAEdvB,cAAczB,EAAOE,GAEjB,GADAA,EAAMwC,MAAQ1C,EAAM0C,OAAS,EACxB1C,EAAMiD,YAAcjD,EAAMiD,aAAe,GAK1C/C,EAAM8C,SAAW,IAAKhD,EAAMiD,iBAJ5B,IAAK,IAAI3B,KAAKwB,EACV5C,EAAM8C,SAASrB,KAAM,CAAEQ,IAAKb,EAAGd,MAAOsC,EAASxB,MAM3D4B,WAAWf,EAAK3B,GACZU,KAAKjB,OAAO,CAAE+C,SAAU9B,KAAKhB,MAAM8C,SAASrB,KAAK,CAAEQ,IAAKA,EAAK3B,MAAOA,mPA9D9CN,MAAMwC,kLAEnC,uGAAyBS,KAAKhB,0EAAmBgB,KAAK3C,gXCezDE,WAAY,CACV0C,YAAI,GAENlD,MAAO,CACLV,KAAM,OACN6D,UAAU,GAEZC,aACEpC,KAAKjB,OAAO,CACVoD,UAAWnC,KAAKhB,MAAMmD,4PAtBnBnD,MAAMmD,0JACZ,yFAAYnD,MAAMV,qLAIF8D,8YCTGtD,MAAMR,8HCOjB,SAASV,EAAEyE,EAAUC,GAClC,OCJiCC,EDIK,iBAAbF,GACtBC,GAAOE,UAAUC,iBAAiBJ,GACnCA,ECJGK,MAAMC,QAAQJ,GAcZA,EAXH,gDACGK,KAAKxD,OAAOyD,UAAUC,SAASC,KAAKR,KACZ,iBAAfA,EAAIrC,OAETwC,MAAMM,KAAKT,GAIX,CAACA,GAbC,IAAoBA,4DCInC,IAAIU,EAAe,EAAQ,KAEvBC,EAAgB9D,OAAO+D,OAAO,MAC9BC,EAAiC,oBAAbZ,SACpBa,EAAUX,MAAMG,UAAUQ,QAkB9B,SAASC,KA2CT,SAASC,EAAU/E,EAAIgF,GACrB,IAAKA,EAAK,CACR,IAAKhF,EAAGiF,KACN,OAIFD,EAAMhF,EAAGiF,KAAKC,MAAM,KAAK,GAG3B,GAAKC,EAAaH,KAIE,IAAhBhF,EAAGoF,UAMFJ,GAASA,EAAIK,QAAQ,SAAW,EAArC,CAKArF,EAAGsF,SAAU,EACb,IAAIC,EAAQvF,EAAGwF,YACfD,EAAMH,UAAW,EACjBG,EAAME,iBAAiB,QAAQ,WACzBF,EAAMH,WAIVG,EAAMH,UAAW,EACjBpF,EAAG0F,WAAWC,YAAY3F,OAE5BuF,EAAME,iBAAiB,SAAS,WAC1BF,EAAMH,WAIVG,EAAMH,UAAW,EACjBpF,EAAG0F,WAAWC,YAAY3F,OAE5BuF,EAAMN,KAAO,GAAGW,OAAOZ,EAAK,KAAKY,OAAOC,KAAKC,OAEzC9F,EAAG+F,YACL/F,EAAG0F,WAAWM,aAAaT,EAAOvF,EAAG+F,aAErC/F,EAAG0F,WAAWO,YAAYV,IAiD9B,SAASW,IACP,IAAI5C,EAAWU,SAASC,iBAAiB,QACzCY,EAAQN,KAAKjB,GAAU,SAAUtD,IACZ,IAAfA,EAAGsF,SAIPP,EAAU/E,MAId,SAASmF,EAAaH,GAGpB,QAAK,YAAYZ,KAAKY,GAOxBmB,EAAOjH,QAAU,SAAUkH,EAAUC,GACnC,GAAIzB,EAEF,OADAnE,QAAQqB,IAAI,8CACLgD,EAGT,IAxLgBwB,EACZC,EAuLAC,EAtKN,SAA6BJ,GAC3B,IAAIK,EAAM/B,EAAc0B,GAExB,IAAKK,EAAK,CACR,GAAIzC,SAAS0C,cACXD,EAAMzC,SAAS0C,cAAcD,QACxB,CACL,IAAIE,EAAU3C,SAAS4C,qBAAqB,UACxCC,EAAgBF,EAAQA,EAAQjF,OAAS,GAEzCmF,IACFJ,EAAMI,EAAcJ,KAIxB/B,EAAc0B,GAAYK,EAG5B,OAAO,SAAUK,GACf,IAAKL,EACH,OAAO,KAGT,IAAIM,EAAcN,EAAIvB,MAAM,kBACxB8B,EAAWD,GAAeA,EAAY,GAE1C,OAAKC,GAIAF,EAIEA,EAAQ5B,MAAM,KAAKnF,KAAI,SAAUkH,GACtC,IAAIC,EAAM,IAAIC,OAAO,GAAGvB,OAAOoB,EAAU,UAAW,KACpD,OAAOvC,EAAagC,EAAIW,QAAQF,EAAK,GAAGtB,OAAOqB,EAAQG,QAAQ,cAAeJ,GAAW,aATlF,CAACP,EAAIW,QAAQ,MAAO,UA2IZC,CAAoBjB,GAoBvC,OA5MgBE,EA0LhB,WACE,IAAIG,EAAMD,EAAaH,EAAQW,UAC3BM,EA7DR,SAAqBb,GACnB,IAAKA,EACH,OAAO,EAGT,IAAInD,EAAWU,SAASC,iBAAiB,QACrCsD,GAAS,EAqBb,OApBA1C,EAAQN,KAAKjB,GAAU,SAAUtD,GAC/B,GAAKA,EAAGiF,KAAR,CAIA,IAAID,EA3BR,SAAsBC,EAAMwB,GAC1B,IAAIe,EAWJ,OATAvC,EAAOR,EAAaQ,EAAM,CACxBwC,UAAU,IAGZhB,EAAIiB,MAAK,SAAU1C,GACbC,EAAKI,QAAQoB,IAAQ,IACvBe,EAAMxC,MAGHwC,EAeKG,CAAa3H,EAAGiF,KAAMwB,GAE3BtB,EAAaH,KAIC,IAAfhF,EAAGsF,SAIHN,IACFD,EAAU/E,EAAIgF,GACduC,GAAS,OAGNA,EAkCUK,CAAYnB,GAE3B,GAAIJ,EAAQwB,OAGV,OAFApH,QAAQqB,IAAI,yDACZoE,IAIEoB,EACF7G,QAAQqB,IAAI,sBAAuB2E,EAAIqB,KAAK,OAE5CrH,QAAQqB,IAAI,wBACZoE,MAIoB,GA3MpBK,EAAU,EACP,WACL,IAAIwB,EAAOvG,KAEPwG,EAAOC,UAEPC,EAAe,WACjB,OAAO5B,EAAG6B,MAAMJ,EAAMC,IAGxBI,aAAa7B,GACbA,EAAU8B,WAAWH,EAgMC,4BCtM1B/B,EAAOjH,QAAU,SAAUoJ,GAGzB,GAFAA,EAAYA,EAAUC,OAElB,UAAUnE,KAAKkE,GACjB,OAAOA,EAGT,IAAIE,GAAwC,IAA7BF,EAAUjD,QAAQ,MAAeiD,EAAUpD,MAAM,MAAM,GAAK,KAAO,GAC9ElE,EAAasH,EAAUlB,QAAQ,IAAID,OAAOqB,EAAU,KAAM,IAAItD,MAAM,KACpEuD,EAAOzH,EAAW,GAAG0H,cAActB,QAAQ,MAAO,IAGtD,OAFApG,EAAW,GAAK,GAETwH,EAAWC,EADMzH,EA5BF2H,QAAO,SAAUC,EAAanF,GAClD,OAAQA,GACN,IAAK,KACHmF,EAAYC,MACZ,MAEF,IAAK,IACH,MAEF,QACED,EAAY3G,KAAKwB,GAGrB,OAAOmF,IACN,IAAId,KAAK,kCCdR,IAAIgB,EAAY,EAAQ,IAAR,CAAyH3C,EAAO4C,GAAI,CAAC,QAAS,IAC9J5C,EAAO6C,IAAIC,QAAQH,GACnB3C,EAAO6C,IAAIE,YAAOC,EAAWL,8BCSnC,SAASM,EAAgBC,GACvB,OAAOA,EAAOjC,QAAQ,UAAU,CAACkC,EAAGC,IAAMA,EAAEC,gBAuB9C,SAASC,EAAaC,EAAQpH,GACxBoH,EAAOC,aACTrH,EAAO2D,YAAYyD,EAAOC,YAC1BF,EAAaC,EAAQpH,IASzB,SAASsH,EAAUC,GACjBC,EAAcD,EAAKE,YAQrB,SAASD,EAAcE,GACrB9F,MAAMM,KAAKwF,GAAUnF,QAAQc,wLAQ/B,MAAMA,EAAckE,GAAQA,GAAQA,EAAKnE,YAAcmE,EAAKnE,WAAWC,YAAYkE,GAQ7E7D,EAAe,CAACiE,EAASC,IAAYA,GAAWA,EAAQxE,YAAcwE,EAAQxE,WAAWM,aAAaiE,EAASC,GAW/GC,EAAkC,IAAIC,IACtCC,EAAoCC,OAAO,kBAC3CC,EAAgB,IAAIC,IACpBC,EAAe,KAEfC,EAAmB,QACnBC,EAAoB,SACpBC,EAAqB,UACrBC,EAAoB,eACpBC,EAAsB,gBACtBC,EAAiB,YACjBC,EAAuB,iBACvBC,EAAiB,YACjBC,EAAwB,kBACxBC,EAAmB,cACnBC,EAAY,QACZC,EAAY,QACZC,EAAY,QACZC,EAAW,OACXC,EAAiBlB,OAAO,QACxBmB,EAAwBnB,OAAO,eAC/BoB,EAAoBpB,OAAO,UAC3BqB,EAAwBrB,OAAO,cAC/BsB,EAAsBtB,OAAO,YAEnC,IAAI3K,EAAuBiB,OAAOiL,OAAO,CACvCC,UAAW,KACXC,8BAA+B5B,EAC/BzK,gCAAiC2K,EACjC2B,YAAazB,EACbE,aAAcA,EACdwB,gBA3BsB,QA4BtBvB,iBAAkBA,EAClBC,kBAAmBA,EACnBC,mBAAoBA,EACpBC,kBAAmBA,EACnBC,oBAAqBA,EACrBC,eAAgBA,EAChBC,qBAAsBA,EACtBC,eAAgBA,EAChBC,sBAAuBA,EACvBC,iBAAkBA,EAClBC,UAAWA,EACXC,UAAWA,EACXC,UAAWA,EACXC,SAAUA,EACVC,eAAgBA,EAChBC,sBAAuBA,EACvBC,kBAAmBA,EACnBC,sBAAuBA,EACvBC,oBAAqBA,IAQnBM,EAAe,CACjBC,KANW,EAOXC,GANS,EAOTC,OANa,EAObC,IANU,EAOVC,KANW,GAaTC,EAAkB,CACpBC,UALgB,EAMhBC,MALY,EAMZC,KALW,EAMXC,MALY,GAQd,MAAMC,EAAcvC,OAAO,QACrBwC,EAAcxC,OAAO,QA+C3B,SAASzJ,EAAe6I,EAAQjH,EAAK3B,EAAOuF,GAc1C,YAbgB,IAAZA,IACFA,EAAU,IAIZzF,OAAOC,eAAe6I,EAAQjH,EAAK7B,OAAOmM,OAAO,CAC/CjM,MAAAA,EACAkM,YAAY,EACZC,UAAU,EACVC,cAAc,GACb7G,IAGIqD,EAUT,SAASyD,EAAiBzD,EAAQ0D,EAAY/G,GAK5C,OAJAzF,OAAOyM,QAAQD,GAAYvI,SAAQyI,IACjC,IAAK7K,EAAK3B,GAASwM,EACnBzM,EAAe6I,EAAQjH,EAAK3B,EAAOuF,MAE9BqD,EAST,SAAS6D,EAAe7D,EAAQ8D,GAK9B,OAJA5M,OAAOyM,QAAQG,GAAU3I,SAAQ4I,IAC/B,IAAKhL,EAAK3B,GAAS2M,EACd/D,EAAOjH,KAAMiH,EAAOjH,GAAO3B,MAE3B4I,EAUT,SAASgE,EAAoBJ,GAC3B,IAAI,KACFK,EAAI,KACJC,GACEN,EACJ,MAAMO,EAAQC,EAAU,CAACH,GAAOA,EAAK5H,aAAagI,GAAKA,IAAMH,IAAM,GAEnE,OADAC,EAAM5L,KAAK2L,GACJC,EAWT,SAASC,EAAU9D,EAAUH,EAAMmE,EAAOC,GACxC,MAAM,YACJlI,GACE8D,EAOJ,OAJKoE,GAAmBpE,EAAKgD,IAAiBhD,EAAKiD,IACjD9C,EAAS/H,KAAK4H,IAGX9D,GAAeiI,EAAMnE,GAAcG,EACjC8D,EAAU9D,EAAUjE,EAAaiI,EACxCC,IAAmBpE,EAAKiD,IAAgB/G,EAAY8G,IAStD,SAASqB,EAAUC,EAASC,GAC1B,cAAcD,IAAYC,EAQ5B,SAASC,EAAMrO,GACb,MAAMsO,EAAQtO,EAAGuO,gBACjB,QAASD,GAAmB,OAAVA,EAQpB,SAASE,EAAWxO,GAClB,MAAoC,aAA7BA,EAAGyO,QAAQ/F,cAQpB,SAASgG,EAAW5N,GAClB,OAAOoN,EAAUpN,EAAO,YAiB1B,SAAS6N,EAAS7N,GAChB,OAAQ8N,EAAM9N,IAAUA,EAAM+N,cAAgBjO,OAQhD,SAASgO,EAAM9N,GACb,OAAOA,MAAAA,EAiJT,MAAMgO,EAAgBxE,OAAO,WACvByE,EAAc,CASlBlB,MAAO,GAQPmB,MAAMC,EAAOC,GACX,OAAO1N,KAAKjB,OAAO0O,EAAOC,IAG5B3O,OAAO0O,EAAOC,GACZ,MAAM,YACJC,EAAW,MACXtB,EAAK,YACLuB,GACE5N,KACE6N,EAAaJ,IAAUH,EAAgB,KAAOtN,KAAK8N,SAASL,GAC5DM,EAAQF,EAAanL,MAAMM,KAAK6K,GAAc,IAE9C,eACJG,EAAc,QACdC,EAAO,YACPC,GAmHN,SAAqBH,EAAON,EAAOC,EAAaS,GAC9C,MAAM,UACJC,EAAS,SACTC,EAAQ,YACRT,EAAW,SACXU,EAAQ,OACRC,EAAM,UACNC,EAAS,KACTC,EAAI,cACJC,GACEP,EACEH,EAAiB,IAAIpF,IACrBqF,EAAU,GACVC,EAAc,GA8CpB,OA7CAH,EAAM1K,SAAQ,CAACpB,EAAMT,KACnB,MAAMmN,EApDV,SAAqBlB,EAAO3B,GAC1B,IAAI,SACFwC,EAAQ,UACRE,EAAS,MACThN,EAAK,KACLS,GACE6J,EAGJ,OAFAzM,EAAeoO,EAAOa,EAAUrM,GAC5BuM,GAAWnP,EAAeoO,EAAOe,EAAWhN,GACzCiM,EA2CWmB,CAAYxP,OAAO+D,OAAOsK,GAAQ,CAChDa,SAAAA,EACAE,UAAAA,EACAhN,MAAAA,EACAS,KAAAA,IAEIhB,EAAMsN,EAASA,EAAOI,GAAWnN,EACjCqN,EAAUjB,EAAYkB,IAAI7N,GAC1BoL,EAAQ,GAEd,GA7EJ,SAAwB+B,EAAWO,GACjC,QAAOP,IAAaA,EAAUO,GA4ExBI,CAAeX,EAAWO,GAC5B,OAGF,MAAMK,GAAaH,EACbI,EAAoBJ,EAAUA,EAAQR,SAAWA,EAASa,QAC1D1Q,EAAKyQ,EAAkBzQ,IAAMiQ,EAAKzK,YAClCmL,EAAOT,GAAiBM,EAjflC,SAA4BC,GAC1B,MAAMG,EAAWH,EAAkBI,IAAIrL,WAAU,IAC3C,KACJmI,EAAI,KACJC,GArBJ,WACE,MAAMD,EAAO3J,SAAS8M,eAAe,IAC/BlD,EAAO5J,SAAS8M,eAAe,IAGrC,OAFAnD,EAAKd,IAAe,EACpBe,EAAKd,IAAe,EACb,CACLa,KAAAA,EACAC,KAAAA,GAeEmD,GACJ,MAAO,CACLC,mBAAmB,EACnBJ,SAAAA,EACAjD,KAAAA,EACAC,KAAAA,EACA5D,SAAU,CAAC2D,KAASzJ,MAAMM,KAAKoM,EAAS7G,YAAa6D,IAseXqD,CAAmBR,GAAqBA,EAAkBE,KAEhGH,EACFf,EAAQxN,MAAK,IAAMwO,EAAkBzB,MAAMhP,EAAImQ,EAASjB,EAAayB,KAErElB,EAAQxN,MAAK,IAAMwO,EAAkBlQ,OAAO4P,EAASjB,KAKnDgB,EACFrC,EAAM5L,QAASuO,EAAYG,EAAK3G,SAAW0D,EAAoBiD,IAE/D9C,EAAM5L,KAAKjC,GAIboP,EAAY8B,OAAOzO,GACnBiN,EAAYzN,QAAQ4L,GAEpB2B,EAAe2B,IAAI1O,EAAK,CACtBoL,MAAAA,EACAgC,SAAUY,EACVN,QAAAA,EACAnN,MAAAA,OAGG,CACLwM,eAAAA,EACAC,QAAAA,EACAC,YAAAA,GAhLI0B,CAAY7B,EAAON,EAAOC,EAAa1N,MAU3C,MA5JW,EAAE6P,EAAGC,EAAGhB,EAAKiB,KAC1B,MAAMC,EAAUF,EAAE5P,OAClB,IAAI+P,EAAOJ,EAAE3P,OACTgQ,EAAOF,EACPG,EAAS,EACTC,EAAS,EACT7R,EAAM,KAEV,KAAO4R,EAASF,GAAQG,EAASF,GAE/B,GAAID,IAASE,EAAQ,CAKnB,MAAM9H,EAAO6H,EAAOF,EAAUI,EAAStB,EAAIgB,EAAEM,EAAS,IAAK,GAAG7L,YAAcuK,EAAIgB,EAAEI,EAAOE,GAAS,GAAKL,EAEvG,KAAOK,EAASF,GAAM1L,EAAasK,EAAIgB,EAAEM,KAAW,GAAI/H,QAErD,GAAI6H,IAASE,EAChB,KAAOD,EAASF,GAET1R,GAAQA,EAAI8R,IAAIR,EAAEM,KAAUhM,EAAY2K,EAAIe,EAAEM,IAAU,IAC7DA,SAGC,GAAIN,EAAEM,KAAYL,EAAEM,GACvBD,IACAC,SAEG,GAAIP,EAAEI,EAAO,KAAOH,EAAEI,EAAO,GAChCD,IACAC,SAIG,GAAIL,EAAEM,KAAYL,EAAEI,EAAO,IAAMJ,EAAEM,KAAYP,EAAEI,EAAO,GAAI,CAO/D,MAAM5H,EAAOyG,EAAIe,IAAII,IAAQ,GAAG1L,YAChCC,EAAasK,EAAIgB,EAAEM,KAAW,GAAItB,EAAIe,EAAEM,MAAY,GAAG5L,aACvDC,EAAasK,EAAIgB,IAAII,GAAO,GAAI7H,GAOhCwH,EAAEI,GAAQH,EAAEI,OAET,CAMH,IAAK3R,EAAK,CACRA,EAAM,IAAIqK,IACV,IAAIpI,EAAI4P,EAER,KAAO5P,EAAI0P,GAAM3R,EAAIoR,IAAIG,EAAEtP,GAAIA,KAIjC,GAAIjC,EAAI8R,IAAIR,EAAEM,IAAU,CAEtB,MAAM3O,EAAQjD,EAAIuQ,IAAIe,EAAEM,IAExB,GAAIC,EAAS5O,GAASA,EAAQ0O,EAAM,CAClC,IAAI1P,EAAI2P,EAEJG,EAAW,EAEf,OAAS9P,EAAIyP,GAAQzP,EAAI0P,GAAQ3R,EAAIuQ,IAAIe,EAAErP,MAAQgB,EAAQ8O,GAAUA,IAYrE,GAAIA,EAAW9O,EAAQ4O,EAAQ,CAC7B,MAAM/H,EAAOyG,EAAIe,EAAEM,GAAS,GAE5B,KAAOC,EAAS5O,GAAOgD,EAAasK,EAAIgB,EAAEM,KAAW,GAAI/H,QAlZ/CI,EAuZGqG,EAAIgB,EAAEM,KAAW,IAvZXG,EAuZezB,EAAIe,EAAEM,MAAY,KAvZRI,EAASrM,YAAcqM,EAASrM,WAAWsM,aAAa/H,EAAS8H,QA0Z5GJ,SAIFhM,EAAY2K,EAAIe,EAAEM,MAAY,IA9ZpB,IAAC1H,EAAS8H,GA0c3BE,CAASpE,EAAO6B,EAwBpB,SAAewC,EAAWhD,GACxB,MAAO,CAACzL,EAAM0O,KACZ,GAAIA,EAAO,EAAG,CAEZ,MAAMhE,EAAU+D,EAAUA,EAAUxQ,OAAS,GAE7C,GAAIyM,EAAS,CAEX,MAAM,SACJ0B,EAAQ,MACRhC,EAAK,QACLsC,GACEhC,EAEJN,EAAMhF,MAGDgF,EAAMnM,SAETwQ,EAAUrJ,MACVgH,EAAS3P,QAAQiQ,EAASjB,EAAa,QAK7C,OAAOzL,GAjDsB2O,CAAMlO,MAAMM,KAAK4K,EAAYiD,UAAWnD,GAAcC,GAEnFM,EAAQ5K,SAAQyB,GAAMA,MAEtB9E,KAAK4N,YAAcI,EACnBhO,KAAKqM,MAAQ6B,EAwFjB,SAAuB7B,GACrB,MAAMyE,EAAQzE,EAAM,GACd0E,EAAO1E,EAAMA,EAAMnM,OAAS,GAC9B4Q,IAAOA,EAAMzF,IAAe,GAC5B0F,IAAMA,EAAKzF,IAAe,GA1F5B0F,CAAchR,KAAKqM,OACZrM,MAGTtB,QAAQ+O,EAAOC,GAEb,OADA1N,KAAKjB,OAAOuO,EAAeI,GACpB1N,OAqMLiR,EAAY,CAQhBzD,MAAMC,EAAOC,GACX,OAAO1N,KAAKjB,OAAO0O,EAAOC,IAG5B3O,OAAO0O,EAAOC,GACZ,MAAMpO,IAAUU,KAAK8N,SAASL,GACxBuB,GAAahP,KAAKV,OAASA,EAC3B4R,EAAclR,KAAKV,QAAUA,EAE7BkO,EAAQ,KACZ,MAAM2D,EAAWnR,KAAKqI,KAAKrE,YAC3BQ,EAAa2M,EAAUnR,KAAK2N,aAC5B3N,KAAKqO,SAAWrO,KAAKqO,SAASa,QAC9BlP,KAAKqO,SAASb,MAAM2D,EAAU1D,EAAOC,IAGvC,QAAQ,GACN,KAAKsB,EACHxB,IACA,MAEF,KAAK0D,EACHlR,KAAKtB,QAAQ+O,GACb,MAEF,QACMnO,GAAOU,KAAKqO,SAAStP,OAAO0O,EAAOC,GAI3C,OADA1N,KAAKV,MAAQA,EACNU,MAGTtB,QAAQ+O,EAAOC,GAEb,OADA1N,KAAKqO,SAAS3P,QAAQ+O,EAAOC,GAAa,GACnC1N,OA0BX,SAASoR,EAAMC,GACb,MAAM,IAAIC,MAAMD,GASlB,SAASE,EAAQzM,GACf,MAAM0M,EAAQ,IAAI5I,IAEZ6I,EAASC,IACNF,EAAMnB,IAAIqB,IAAwBF,EAAM7B,IAAI+B,EAAK5M,EAAG/B,KAAK/C,KAAM0R,MAA9CF,EAAM1C,IAAI4C,GAIpC,OADAD,EAAOD,MAAQA,EACRC,EAQT,SAASE,EAA6BC,GACpC,OAAOA,EAAWzK,QAAO,CAAC0K,EAAKC,KAC7B,MAAM,MACJxS,EAAK,KACLsN,GACEkF,EAEJ,QAAQ,GAEN,KAAMA,EAAUxT,MA/rBJ,IA+rBYsO,EACtB,OAAOxN,OAAOmM,OAAO,GAAIsG,EAAKvS,GAGhC,KAhsBQ,IAgsBHsN,EACHiF,EAAIvS,MAAQwS,EAAUxS,MACtB,MAGF,QACEuS,EAAIjK,EAAgBkK,EAAUxT,OAASwT,EAAUxS,MAGrD,OAAOuS,IACN,IAGL,MAAME,GAAkC,oBAAZC,QAA0B,GAAKA,QAAQnP,UAC7DoP,GAAuBV,GAAQjT,GAAQyT,GAAaG,eAAe5T,KAwGzE,MAAM6T,GAAmB,MAKnBC,GAAgB,CACpBC,YAAYC,GACVtS,KAAKsS,EAAM1F,MAAM0F,KAIfC,GAAmB,IAAIC,QA6C7B,SAASC,GAAqBnT,GAC5B,OAAO8N,EAAM9N,GAAS,GAAKA,EAU7B,MAAMoT,GAAc,CAACrK,EAAMsK,KACzB,MAAM7R,EAASuH,EAAKE,WAAWoK,GAE/B,GAAI7R,EAAO8R,WAAaC,KAAKC,aAAc,CACzC,MAAMC,EAAWvQ,SAAS8M,eAAe,IAEzC,OADAjH,EAAKmI,aAAauC,EAAUjS,GACrBiS,EAGT,OAAOjS,GA0BT,IAAIkS,GAAc,CAChB,EAlJF,SAASC,EAAoB5K,EAAM4D,EAAO3M,EAAO4T,GAC/C,IAAI,KACF5U,GACE2N,EAGJ,IAAK3N,EAWH,OAVI4U,GA1CR,SAA6B7K,EAAM8K,EAAeC,GAChD,MAAMC,EAAUF,EAAgB/T,OAAOkU,KAAKH,GAAiB,GAC7D/T,OAAOkU,KAAKF,GAAeG,QAAOjV,IAAS+U,EAAQG,SAASlV,KAAO+E,SAAQyO,GAAazJ,EAAKoL,gBAAgB3B,KA0CzG4B,CAAoBrL,EAAM/I,EAAO4T,QAI/B5T,GAjER,SAA0B+I,EAAMuJ,GAC9BxS,OAAOyM,QAAQ+F,GAAYvO,SAAQyI,IACjC,IAAKxN,EAAMgB,GAASwM,EACpB,OAAOmH,EAAoB5K,EAAM,CAC/B/J,KAAAA,GACCgB,MA6DDqU,CAAiBtL,EAAM/I,KAOtB2S,GAAqB3T,KAvmB5B,SAAmBgB,GACjB,OAAOoN,EAAUpN,EAAO,WAsmBYsU,CAAUtU,IAAU6N,EAAS7N,IAAU4N,EAAW5N,MACpF+I,EAAK/J,GAAQgB,GApCjB,SAA+BA,GAC7B,OAAQA,GAAmB,IAAVA,EAsCbuU,CAAsBvU,GACxB+I,EAAKoL,gBAAgBnV,GAlDzB,SAA4BgB,GAC1B,OAAiB,IAAVA,GAAkB,CAAC,SAAU,UAAUkU,gBAAgBlU,GAkDnDwU,CAAmBxU,IAC5B+I,EAAK0L,aAAazV,EAUtB,SAAwBA,EAAMgB,GAE5B,OAAiB,IAAVA,EAAiBhB,EAAOgB,EAZL0U,CAAe1V,EAAMgB,KAuH/C,EA5EF,SAAyB+I,EAAMyD,EAAMxM,GACnC,IAAI,KACFhB,GACEwN,EACJ,MAAMmI,EAAsB3V,EAAKsH,QAAQuM,GAAkB,IACrD+B,EAAgB3B,GAAiBzD,IAAIzG,IApBtBA,CAAAA,IACrB,MAAM8L,EAAW/U,OAAO+D,OAAOiP,IAE/B,OADAG,GAAiB5C,IAAItH,EAAM8L,GACpBA,GAiB6CC,CAAe/L,IAC5DgM,EAAUxP,GAhCWvF,CAAAA,GAASoD,MAAMC,QAAQrD,GAASA,EAAQ,CAACA,GAAO,GAgChDgV,CAAsBhV,GAC5CiV,EAAUL,EAAcD,GAExBO,EAAeH,IAAaE,EADVA,IAAYF,GAIlChM,EAAKoM,oBAAoBR,EAAqBC,GAG5CM,GACFnM,EAAKpE,iBAAiBgQ,EAAqBC,EAAerP,GAG5DqP,EAAcD,GAAuBI,GA0DrC,EAnBF,SAAwBhM,EAAMqM,EAAMpV,GAClC+I,EAAKqM,KAAOjC,GAAqBnT,IAmBjC,EARF,SAAyB+I,EAAMsM,EAAYrV,GACzC+I,EAAK/I,MAAQmT,GAAqBnT,KAUpC,MAAMsV,GAAa,CAWjBpH,MAAMC,GAKJ,OAHAzN,KAAKV,MAAQU,KAAK8N,SAASL,GAE3B9G,GAAM3G,KAAMA,KAAKV,OACVU,MAQTjB,OAAO0O,GAEL,MAAMnO,EAAQU,KAAK8N,SAASL,GAQ5B,OANIzN,KAAKV,QAAUA,IAEjBqH,GAAM3G,KAAMV,GACZU,KAAKV,MAAQA,GAGRU,MAOTtB,UAGE,OAj9BU,IAg9BNsB,KAAK4M,MAAgBjG,GAAM3G,KAAM,MAC9BA,OAWX,SAAS2G,GAAMgO,EAAYrV,GACzB,OAAO0T,GAAY2B,EAAW/H,MAAM+H,EAAWtM,KAAMsM,EAAYrV,EAAOqV,EAAWrV,OAGrF,SAASuV,GAASxM,EAAMqM,GACtB,OAAOtV,OAAOmM,OAAO,GAAIqJ,GAAYF,EAAM,CACzCrM,KAj+BS,IAi+BHqM,EAAK9H,KAAgB8F,GAAYrK,EAAMqM,EAAK/B,gBAAkBtK,IAuCxE,MAAMyM,GAAgB,CAACrH,EAAOC,IAAgBD,EAAMvD,IAAsBwD,EAEpEqH,GAAc,CAIlBnD,WAAY,GAGZoD,iBAAiBvH,EAAOC,GACtB,OApBJ,SAA2BkE,EAAYnE,EAAOC,GAC5C,IAAKkE,IAAeA,EAAW1R,OAAQ,OAAOwN,EAC9C,MAAMsF,EAAcpB,EAAWrT,KAAI0W,GAAQ7V,OAAOmM,OAAO,GAAI0J,EAAM,CACjE3V,MAAO2V,EAAKnH,SAASL,OAEvB,OAAOrO,OAAOmM,OAAOnM,OAAO+D,OAAOuK,GAAe,MAAOiE,EAA6BqB,IAe7EkC,CAAkBlV,KAAK4R,WAAYnE,EAAOC,IAInDF,MAAMC,EAAOC,GACX,MAAMyH,IAAe1H,EAAM2H,OAAQ3H,EAAM2H,MAAMC,MAAKvJ,IAClD,IAAI,GACFvE,GACEuE,EACJ,OAAOvE,IAAOvH,KAAK1B,SAEf,WACJ4F,GACElE,KAAKqI,KACHiN,EAAaR,GAAcrH,EAAOC,GAWxC,OAVA1N,KAAKqO,SAAW8G,GAAgBhS,GAAOgS,EAAaI,KAAMJ,EAAaK,UAAUC,UAAUvR,GAEvFlE,KAAKqO,WACPjG,EAAUpI,KAAKqI,MACfrI,KAAKqO,SAASb,MAAMxN,KAAKqI,KAAMrI,KAAKgV,iBAAiBvH,EAAO6H,GAAaA,GACzEtV,KAAKqO,SAAS7F,SAAW9F,MAAMM,KAAKhD,KAAKqI,KAAKE,aAGhDmN,GAAqB1V,KAAKqI,MAC1BlE,EAAYnE,KAAKqI,MACVrI,MAGTjB,OAAO0O,EAAOC,GACZ,GAAI1N,KAAKqO,SAAU,CACjB,MAAMiH,EAAaR,GAAcrH,EAAOC,GACxC1N,KAAKqO,SAAStP,OAAOiB,KAAKgV,iBAAiBvH,EAAO6H,GAAaA,GAGjE,OAAOtV,MAGTtB,QAAQ+O,EAAOC,EAAaiI,GAK1B,OAJI3V,KAAKqO,UACPrO,KAAKqO,SAAS3P,QAAQsB,KAAKgV,iBAAiBvH,EAAOC,GAAc,KAAMiI,GAGlE3V,OAUX,SAAS0V,GAAqBE,GAC5B,MAAMC,EAAQD,GAAQA,EAAKzN,WACtB0N,IACLrR,EAAaqR,EAAOD,GACpBF,GAAqBE,IAmEvB,SAASE,GAAaV,GACpB,OAAOA,EAAMjO,QAAO,CAAC0K,EAAK/F,KACxB,IAAI,SACF0J,GACE1J,EACJ,OAAO+F,EAAIzN,OAAOoR,KACjB,IAeL,MAAMO,GAAa,CASjBvI,MAAMC,GACJ,OAAOzN,KAAKjB,OAAO0O,IAGrB1O,OAAO0O,EAAOC,GACZ,MAAMpP,EAAO0B,KAAK8N,SAASL,GAa3B,OAXInP,GAAQA,IAAS0B,KAAK1B,KACxB0B,KAAKgW,IAAIjX,OAAO0O,IAGhBzN,KAAKtB,QAAQ+O,EAAOC,GAAa,GAEjC1N,KAAK1B,KAAOA,EACZ0B,KAAKgW,IA/EX,SAAgBnX,EAAWuW,EAAOxD,GAUhC,YATc,IAAVwD,IACFA,EAAQ,SAGS,IAAfxD,IACFA,EAAa,IAIX/S,EACKA,EAAU,CACfuW,MAAAA,EACAxD,WAAAA,IAKGzO,GAgCT,SAAuBiS,GACrB,OAAOA,EAAMjO,QAAO,CAAC0K,EAAK+D,IACjB/D,EAAM+D,EAAKL,MACjB,IAnCWU,CAAcb,GAAQ,IAAIU,GAAaV,GAAQ,CAG3DpC,YAAapB,EAAWrT,KAAI0W,GACnB7V,OAAOmM,OAAO,CACnBqB,KAnoCU,GAooCTqI,QAuDQiB,CAAOlW,KAAKmW,aAAa7X,GAAO0B,KAAKoV,MAAOpV,KAAK4R,YAC5D5R,KAAKgW,IAAIxI,MAAMxN,KAAKqI,KAAMoF,IAGrBzN,MAGTtB,QAAQ+O,EAAOC,EAAa0I,GAM1B,OALIpW,KAAKgW,KAEPhW,KAAKgW,IAAItX,QAAQ0X,GAGZpW,OAoBX,IAAIwV,GAAW,CACb,EAvlBF,SAAkBnN,EAAMyD,GACtB,IAAI,SACFgC,EAAQ,SACRO,GACEvC,EACJ,MAAM6B,EAAcnL,SAAS8M,eAAe,IAG5C,OAFA9K,EAAamJ,EAAatF,GAC1BlE,EAAYkE,GACLjJ,OAAOmM,OAAO,GAAI0F,EAAW,CAClC5I,KAAAA,EACAyF,SAAAA,EACAH,YAAAA,EACAU,SAAUA,EAASoH,UAAUpN,MA4kB/B,EArOF,SAAkBA,EAAMyD,GACtB,IAAI,YACFkH,GACElH,EACJ,OAAO1M,OAAOmM,OAAO,IAdWsC,EAckBmF,EAAYzU,KAAIoW,GAAcE,GAASxM,EAAMsM,KAAc,CAAC,QAAS,SAAU,WAblHxN,QAAO,CAAC0K,EAAKwE,IACnBjX,OAAOmM,OAAO,GAAIsG,EAAK,CAC5B,CAACwE,GAAS5I,GACDI,EAAWtP,KAAI0D,GAAQA,EAAKoU,GAAQ5I,MAJIkB,aAOlD,MAPL,IAAkCd,GAgPhC,EAxqBF,SAAkBxF,EAAM4D,GACtB,IAAI,SACF6B,EAAQ,UACRM,EAAS,SACTE,EAAQ,UACRE,EAAS,OACTD,EAAM,SACNF,GACEpC,EACJ,MAAM0B,EAAcnL,SAAS8M,eAAe,IACtCb,EAAOpG,EAAKrE,YAGlB,OAFAQ,EAAamJ,EAAatF,GAC1BlE,EAAYkE,GACLjJ,OAAOmM,OAAO,GAAIgC,EAAa,CACpCK,YAAa,IAAIhF,IACjBP,KAAAA,EACAoG,KAAAA,EACAL,UAAAA,EACAN,SAAAA,EACAY,cAAe1B,EAAWyB,GAC1BJ,SAAUA,EAASoH,UAAUpN,GAC7BkG,OAAAA,EACAC,UAAAA,EACAF,SAAAA,EACAX,YAAAA,KAipBF,EApBF,SAAkBtF,EAAM4D,GACtB,IAAI,SACF6B,EAAQ,aACRqI,EAAY,MACZf,EAAK,WACLxD,GACE3F,EACJ,OAAO7M,OAAOmM,OAAO,GAAIwK,GAAY,CACnC1N,KAAAA,EACAyF,SAAAA,EACAsH,MAAAA,EACAxD,WAAAA,EACAuE,aAAAA,KASF,EA1IF,SAAoB9N,EAAM4D,GACxB,IAAI,KACF3N,EAAI,WACJsT,GACE3F,EACJ,OAAO7M,OAAOmM,OAAO,GAAIwJ,GAAa,CACpCnD,WAAAA,EACAvJ,KAAAA,EACA/J,KAAAA,MA6IJ,SAASgY,GAAyBtD,EAAauD,GAC7C,OAAOvD,EAAYzU,KAAIT,GA3uCZ,IA2uCiBA,EAAE8O,KAAgBxN,OAAOmM,OAAO,GAAIzN,EAAG,CACjE6U,eAAgB7U,EAAE6U,eAAiB4D,IAChCzY,IAWP,SAAS0Y,GAAS/H,EAAMN,EAASsI,GAC/B,MAAM,SACJpU,EAAQ,KACRuK,EAAI,mBACJ8J,EAAkB,YAClB1D,GACE7E,EAEE9F,EAAOhG,EAAWoM,EAAKkI,cAActU,GAAYoM,EAEnDiI,GAAoBrO,EAAKoL,gBAAgBiD,GAC7C,MAAME,EAAqB5D,GAAe,GAE1C,OAAQwC,GAAS5I,IAAS4I,GAlxCb,IAkxC+BnN,EAAMjJ,OAAOmM,OAAO,GAAI4C,EAAS,CAC3E6E,YAAayD,IAAsBpU,EAAWiU,GAAyBM,EAAoBH,GAAqBG,KAoCpH,SAASC,GAAUrY,EAAI6Q,GACrB,QAAQ,GACN,KAAKxC,EAAMrO,GACTyJ,EAAaoH,EAAK7Q,GAClB,MAEF,KAAKwO,EAAWxO,GACdA,EAAG0F,WAAWsM,aAAanB,EAAK7Q,GAChC,MAEF,QACEA,EAAGiG,YAAY4K,IAiCrB,MAAMyH,GAAgB1X,OAAOiL,OAAO,CAgBlCoL,UAAUjX,GAGR,OADAwB,KAAKqP,IAAMrP,KAAKqP,KAxCpB,SAA2B7Q,EAAI+W,GAC7B,OAAOA,IAAyB,iBAATA,EAnCzB,SAAuB9G,EAAM8G,GAC3B,OAAI1I,EAAM4B,GAdZ,SAAuB8G,EAAMwB,GAG3B,OADgBA,EAAUC,cAAcC,YAAW,IAAIC,OAAOC,WAAYC,gBAAgB,2CAA2C7B,UAAc,mBAAmB8B,iBAAiB,GAY/JC,CAAc/B,EAAM9G,GArB9C,SAAwB8G,EAAM9G,GAC5B,MAAMJ,EAAWrB,EAAWyB,GAAQA,EAAOjM,SAAS+U,cAAc,YAElE,OADAlJ,EAASmJ,UAAYjC,EACdlH,EAASoJ,QAmBTC,CAAenC,EAAM9G,GAiCekJ,CAAcnZ,EAAI+W,GAAQA,GAuC5CqC,CAAkBpZ,EAAIwB,KAAKuV,OAAS/S,SAASqV,yBAC7D7X,MAaTwN,MAAMhP,EAAIiP,EAAOC,EAAayB,GAK5B,QAJa,IAATA,IACFA,EAAO,KAGJ3Q,EAAI,MAAM,IAAI8S,MAAM,2DACrBtR,KAAKxB,IAAIwB,KAAKtB,QAAQ+O,GAG1B,MAAM,SACJ2B,EAAQ,SACR5G,EAAQ,kBACRgH,GACEL,GAGE,WACJjL,GACEsE,EAAWA,EAAS,GAAKhK,EACvBkQ,EAAgB1B,EAAWxO,GAC3BiY,EAAoB/H,EA9D9B,SAA8BxK,EAAY1F,EAAI2Q,GAC5C,MAAM2I,EAAWpV,MAAMM,KAAKkB,EAAWqE,YACvC,OAAOnH,KAAK2W,IAAID,EAASjU,QAAQrF,GAAKsZ,EAASjU,QAAQsL,EAAKhD,MAAQ,EAAG,GA4D3B6L,CAAqB9T,EAAY1F,EAAI2Q,GAAQ,KAEvFnP,KAAKyV,UAAUjX,GAGf,MAAMwF,EAAYoL,GAAYpP,KAAKqP,IAAIrL,WAAU,GAajD,OAVAhE,KAAKxB,GAAKkQ,EAAgBxK,EAAa1F,EAEvCwB,KAAKwI,SAAWkG,EAAgBlG,GAAY9F,MAAMM,KAAKgB,EAAUuE,YAAc,MAE1EiH,GAAqBxL,GAAW6S,GAAUrY,EAAIwF,GAEnDhE,KAAKwV,SAAWxV,KAAKiY,aAAa1Z,KAAI4P,GAAWqI,GAASxW,KAAKxB,GAAI2P,EAASsI,KAC5EzW,KAAKwV,SAASnS,SAAQyM,GAAKA,EAAEtC,MAAMC,EAAOC,KAE1C1N,KAAKmP,KAAOA,EACLnP,MASTjB,OAAO0O,EAAOC,GAEZ,OADA1N,KAAKwV,SAASnS,SAAQyM,GAAKA,EAAE/Q,OAAO0O,EAAOC,KACpC1N,MAWTtB,QAAQ+O,EAAOC,EAAaiI,QACH,IAAnBA,IACFA,GAAiB,GAGnB,MAAMnX,EAAKwB,KAAKxB,GAEhB,IAAKA,EACH,OAAOwB,KAKT,OAFAA,KAAKwV,SAASnS,SAAQyM,GAAKA,EAAEpR,QAAQ+O,EAAOC,EAAaiI,MAEjD,GAGN,KAAKnX,EAAGwL,IAAsC,OAAnB2L,EACzB,MAIF,KAAKjT,MAAMC,QAAQ3C,KAAKwI,UACtBF,EAActI,KAAKwI,UACnB,MAGF,KAAMmN,EACJvN,EAAU5J,GACV,MAGF,MAAOmX,EACLxR,EAAY3F,GAKhB,OADAwB,KAAKxB,GAAK,KACHwB,MAOTkP,QACE,OAAO9P,OAAOmM,OAAO,GAAIvL,KAAM,CAC7BmP,KAAM,GACN3Q,GAAI,UAYV,SAAS2E,GAAOoS,EAAMC,GAKpB,YAJiB,IAAbA,IACFA,EAAW,IAGNpW,OAAOmM,OAAO,GAAIuL,GAAe,CACtCvB,KAAAA,EACA0C,aAAczC,IA8DlB,IAAI0C,GAA2B9Y,OAAOiL,OAAO,CAC3CC,UAAW,KACX+D,SAAUlL,GACVgV,cAAe3B,GACf4B,iBAAkBvD,GAClBnK,aAAcA,EACdM,gBAAiBA,IAGnB,SAAS1H,KACP,OAAOtD,KAqBT,SAASqY,GAAanQ,GACpB,OAAOgF,EAAWhF,GAAUA,EAAOrF,WAAaqF,EAAOrF,UAAUwK,YAAc,IAAInF,EAAWA,IAAWA,EAQ3G,SAASoQ,GAAW/V,GAElB,OAAKG,MAAMC,QAAQJ,GAQZA,EAND,gDAAgDK,KAAKxD,OAAOyD,UAAUC,SAASC,KAAKR,KAA+B,iBAAfA,EAAIrC,OAA4BwC,MAAMM,KAAKT,GAE1I,CAACA,GAcd,SAAS3E,GAAEyE,EAAUC,GACnB,OAAOgW,GAA+B,iBAAbjW,GAAyBC,GAAOE,UAAUC,iBAAiBJ,GAAYA,GAUlG,MAAMkW,GAAY1H,GAA4B,IAAlBA,EAAO3Q,OAAe2Q,EAAO,GAAKA,EA0C9D,SAASlB,GAAIpN,EAAKjE,EAAMgB,GACtB,MAAMkZ,EAAwB,iBAATla,EAAoBA,EAAO,CAC9C,CAACA,GAAOgB,GAEJR,EAAQM,OAAOkU,KAAKkF,GAI1B,OAHAF,GAAW/V,GAAKc,SAAQ7E,IACtBM,EAAMuE,SAAQoV,GAAQja,EAAGuV,aAAa0E,EAAMD,EAAMC,SAE7ClW,EA2BT,MAAMmW,GAAc,IAAI9P,IAGH,IAAC+P,GAqBlB3a,GAAa,CACf0a,YAAAA,GAQAE,IAAIta,EAAMua,GAMR,OALKH,GAAYrI,IAAI/R,KACnBoa,GAAY/I,IAAIrR,EAAMua,GACtB7Y,KAAK8Y,UAGA9Y,MAQT8Y,SAEE,OAzCIH,KAIJhJ,GADAgJ,GAAQ/a,GAVgB,eAUO,IAAM4E,SAAS+U,cAAc,SACjD,OAAQ,YAGdoB,GAAMzU,YAAY1B,SAAS2J,KAAK1H,YAAYkU,IAC1CA,KAgCQnB,UAAY,IAAIkB,GAAY7H,UAAUvK,KAAK,MACnDtG,MAQTrB,OAAOL,GAML,OALIoa,GAAYrI,IAAI/R,KAClBoa,GAAYhJ,OAAOpR,GACnB0B,KAAK8Y,UAGA9Y,OAYX,SAAS+Y,GAAMjU,GACb,IAAK,IAAIkU,EAAOvS,UAAUvG,OAAQ2R,EAAM,IAAInP,MAAMsW,EAAO,EAAIA,EAAO,EAAI,GAAIC,EAAO,EAAGA,EAAOD,EAAMC,IACjGpH,EAAIoH,EAAO,GAAKxS,UAAUwS,GAG5B,OAAO,WACL,IAAK,IAAIC,EAAQzS,UAAUvG,OAAQsG,EAAO,IAAI9D,MAAMwW,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IACpF3S,EAAK2S,GAAS1S,UAAU0S,GAI1B,OADA3S,EAAO,IAAIqL,KAAQrL,IACPtG,OAAS4E,EAAG5E,OAAS6Y,GAAMjU,KAAO0B,GAAQ1B,KAAM0B,IAUhE,SAAS4S,GAAQzM,GACf,OAnKF,SAAoBpK,EAAKjE,EAAM+X,GAC7B,MAAMgD,EAAwB,iBAAT/a,EAAoB,CAACA,GAAQA,EAClD,OAAOia,GAAUD,GAAW/V,GAAKhE,KAAIC,GAC5B+Z,GAAUc,EAAM9a,KAAIgO,GAAK/N,EAAS,aAAE+N,SA4DtC+M,CAoGI3M,EAAS1D,IAAiB0D,EAAQM,QAAQ/F,cAGvD,MAAMqS,GAAyBna,OAAOiL,OAAO,CAE3CzM,EAAEyE,GACA,OAAOzE,GAAEyE,EAAUrC,KAAKyO,MAAM,IAGhC+K,GAAGnX,GACD,OAAOzE,GAAEyE,EAAUrC,KAAKyO,SAItBgL,GAAqBra,OAAOiL,OAAO,CACvC,CAACnB,GAAmB5F,GACpB,CAAC6F,GAAoB7F,GACrB,CAAC8F,GAAqB9F,KAElBoW,GAA8Bta,OAAOiL,OAAO,CAChD,CAAChB,GAAoB/F,GACrB,CAACgG,GAAsBhG,GACvB,CAACiG,GAAiBjG,GAClB,CAACkG,GAAuBlG,GACxB,CAACmG,GAAiBnG,GAClB,CAACoG,GAAwBpG,GACzB,CAACqG,GAAmBrG,KAEhBqW,GAA4Bva,OAAOmM,OAAO,GAAIkO,GAAoB,CACtEvK,MAAO5L,GACPmS,UAAWnS,KAQPsW,GAA0BrI,EAAQsI,IAuBxC,MAAMC,GAA+B,CAACzR,EAAMxJ,IAAcwJ,EAAKQ,GAAqChK,EAQpG,SAASkb,GAAqBC,GAC5B,MAAO,CAAC9Q,EAAkBC,EAAmBC,GAAoBjC,QAAO,CAAC0K,EAAKwE,KAC5ExE,EAAIwE,GAAU2D,EAAY3D,GACnBxE,IACN,IA2EL,SAASgI,GAAgBI,GACvB,MAAM,IACJpB,EAAG,SACHxK,EAAQ,QACR3Q,EAAO,KACPY,GACE2b,EACEC,EAAa7L,EAxErB,SAAkCA,EAAU4L,GAC1C,MAAMza,EA+KR,SAA6BA,GAK3B,YAJmB,IAAfA,IACFA,EAAa,IAGRJ,OAAOyM,QAAQwM,GAAa7Y,IAAa2H,QAAO,CAAC0K,EAAKsI,KAC3D,IAAKlZ,EAAK3B,GAAS6a,EAtsEvB,IAAyBtS,EAwsErB,OADAgK,GAvsEqBhK,EAusED5G,EAtsEf4G,EAAOjC,QAAQ,kBAAmB,SAASsB,gBAssEpB2S,GAAgBva,GACrCuS,IACN,IAxLgBuI,CAAoBH,EAAiBvc,QAAUuc,EAAiBvc,QAAQ8B,WAAa,IACxG,OAAO6O,EAASlL,GAAQ6H,EAAiBN,GAAcpM,GAEjDA,IAAS2b,EAAiB3b,KAAasb,GAAwBK,GAE5Dza,EAAWlB,IAASqK,EAAgCmG,IAAIxQ,KAkEnC+b,CAAyBhM,EAAU4L,GAAoBN,GACrF,OAAO1N,IACL,IAAI,MACFmJ,EAAK,WACLxD,EAAU,MACV9S,GACEmN,EAEJ,GAAIvO,GAAWA,EAAQsM,GAAiB,OA3D5C,SAA6BsQ,EAAqBxO,GAChD,IAAI,MACFsJ,EAAK,WACLxD,EAAU,MACV9S,EAAK,IACL+Z,EAAG,SACHxK,GACEvC,EACAuC,GAAU+C,EAAM,qCAChByH,GAAKzH,EAAM,mCACf,MAAMvS,EAAYkN,EAAeuO,EAAoB,CACnDlF,MAAAA,EACAxD,WAAAA,EACA9S,MAAAA,IACE2a,IACJ,OAAOM,IAAqB1D,GAAU,WACpC,IAAK,IAAI2C,EAAOvS,UAAUvG,OAAQsG,EAAO,IAAI9D,MAAMsW,GAAOC,EAAO,EAAGA,EAAOD,EAAMC,IAC/EzS,EAAKyS,GAAQxS,UAAUwS,GAKzB,GAAI5C,IAAWnN,EAAkB,CAC/B,MAAOyD,GAAWnG,EAElBnH,EAAesN,EAAS3C,GAAgB,GACxC8P,GAA6BnN,EAAS9N,GAIxC,OADAA,EAAUwX,MAAW7P,GACd3H,KA6BwC0b,CAAoB7c,EAAS,CAC1E0X,MAAAA,EACAxD,WAAAA,EACA9S,MAAAA,EACA+Z,IAAAA,EACAxK,SAAAA,IAEF,MAAMhQ,EAAega,GAAa3a,IAAY,GACxCmB,EAAY2b,GAAgB,CAChC3B,IAAAA,EACAxK,SAAU6L,EACV7b,aAAAA,EACAC,KAAAA,GAJgBkc,CAKf,CACDpF,MAAAA,EACAxD,WAAAA,EACA9S,MAAAA,IAMF,MAAO,CACL0O,MAAK,CAACb,EAASe,EAAa1O,IACnBH,EAAU2O,MAAMb,EAAS3N,EAAO0O,GAGzC3O,OAAM,CAAC2O,EAAa1O,IACXH,EAAUE,OAAOC,EAAO0O,GAGjChP,QAAQ+b,GACC5b,EAAUH,QAAQ+b,KAajC,SAASD,GAAgBE,GACvB,IAAI,IACF7B,EAAG,SACHxK,EAAQ,aACRhQ,EAAY,KACZC,GACEoc,EAGJ,OADI7B,GAAOva,GAAMN,GAAW4a,IAAIta,EAAMua,GAC/BE,GAAM4B,GAAN5B,CAA2BpN,EAClCI,EAAe1N,EAAce,OAAOmM,OAAO,GAAImO,GAA6B,CAC1E,CAAC9P,GAAY,GACb,CAACC,GAAY,MACVzK,OAAOmM,OAAO,CAEjB,CAACzB,GAAY,KACb,CAACC,GAAW,MACXwP,GAAwB,CACzBjb,KAAAA,EACAua,IAAAA,EACAxK,SAAAA,MA4DJ,SAASuM,GAAaC,EAAUC,GAC9B,OAAO1b,OAAOmM,OAAO,GAAIsP,EAAUxC,GAAayC,IAwBlD,SAASH,GAAoB9b,EAAWkc,GACtC,IAAI,MACF3F,EAAK,WACLxD,EAAU,MACV9S,GACEic,EACJ,OAjiBuB7S,EAufzB,SAAoBrJ,GAClB,MAAO,IAAIkK,GAAe5B,QAAO,CAACY,EAAGjD,IAAOA,EAAGiD,IAAMA,GAAGlJ,GAyCjCmc,CAAWrP,EAAiBwB,EAAStO,GAAaO,OAAO+D,OAAOtE,GAAaA,EAAW,CAC7G2O,MAAMb,EAAS3N,EAAO0O,GAyBpB,YAxBc,IAAV1O,IACFA,EAAQ,IAIVK,EAAesN,EAAS3C,GAAgB,GACxChK,KAAKkK,GAAqBwD,EAC1B1N,KAAKmK,GA1FX,SAAiC9B,EAAMuJ,QAClB,IAAfA,IACFA,EAAa,IAGf,MAAMoB,EAAcpB,EAAWrT,KAAIsR,GAAKgF,GAASxM,EAAMwH,KACjD1B,EAAU,GAChB,OAAO/O,OAAOmM,OAAO4C,EAAS/O,OAAOmM,OAAO,CAC1CyH,YAAAA,GACC+G,IAAqB1D,GAAU5I,IAChCuF,EAAY3P,SAAQvF,GAAKA,EAAEuY,GAAQ5I,KAC5BU,OA+EyB8M,CAAwBtO,EAASiF,GAAYpE,MAAME,GACjFrO,EAAeW,KAAM4J,EAAWxK,OAAOiL,OAAOjL,OAAOmM,OAAO,GA3RlE,SAA8BoB,EAASuO,GAKrC,YAJqB,IAAjBA,IACFA,EAAe,IAGV9b,OAAOmM,OAAO,GA79DvB,SAA+BoB,GAC7B,OAAOjK,MAAMM,KAAK2J,EAAQiF,YAAYzK,QAAO,CAAC0K,EAAKC,KACjDD,EAAIjK,EAAgBkK,EAAUxT,OAASwT,EAAUxS,MAC1CuS,IACN,IAy9DsBsJ,CAAsBxO,GAAU0L,GAAa6C,IAsRFE,CAAqBzO,EAAS7N,GAAQ6S,EAA6B3R,KAAKmK,GAAuB6I,gBAC/JhT,KAAc,MAAI4a,GAAa5a,KAAc,MAAGhB,GAChDgB,KAAKoK,GAAuBpK,KAAKqO,SAASoH,UAAU9I,GAASuC,QAE7D4K,GAA6BnN,EAAS3M,MAEtCnB,EAAUP,MApChB,SAAoBqO,EAASrO,GACvB8a,GAAQzM,KAAarO,GACvBqR,GAAIhD,EAAS1D,EAAc3K,GAkCP+c,CAAW1O,EAAS9N,EAAUP,MAEhDe,EAAeW,KAAM+J,EAAU4C,GAE/BtN,EAAeW,KAAM8J,EAAWsL,GAEhCpV,KAAwB,cAAEA,KAAc,MAAGA,KAAc,OAEzDA,KAAKoK,GAAqBoD,MAAMb,EAAS3M,KAAM0N,GAC/C1N,KAAmB,UAAEA,KAAc,MAAGA,KAAc,OAC7CA,MAGTjB,OAAOC,EAAO0O,QACE,IAAV1O,IACFA,EAAQ,IAGN0O,IACF1N,KAAKkK,GAAqBwD,EAC1B1N,KAAKmK,GAAuBpL,OAAO2O,IAGrC,MAAM4N,EAAW3J,EAA6B3R,KAAKmK,GAAuB6I,aAC1E,IAA2D,IAAvDhT,KAAsB,aAAEsb,EAAUtb,KAAc,OAapD,OAZAX,EAAeW,KAAM4J,EAAWxK,OAAOiL,OAAOjL,OAAOmM,OAAO,GAAIvL,KAAc,MAAGsb,KACjFtb,KAAc,MAAI4a,GAAa5a,KAAc,MAAGhB,GAChDgB,KAAyB,eAAEA,KAAc,MAAGA,KAAc,OAGrDA,KAAKiK,KACRjK,KAAKiK,IAAyB,EAC9BjK,KAAKoK,GAAqBrL,OAAOiB,KAAMA,KAAKkK,KAG9ClK,KAAmB,UAAEA,KAAc,MAAGA,KAAc,OACpDA,KAAKiK,IAAyB,EACvBjK,MAGTtB,QAAQ+b,GAON,OANAza,KAA0B,gBAAEA,KAAc,MAAGA,KAAc,OAC3DA,KAAKmK,GAAuBzL,UAG5BsB,KAAKoK,GAAqB1L,QAAQsB,KAAMA,KAAKkK,GAAqC,OAAjBuQ,EAAwB,MAAQA,GACjGza,KAAqB,YAAEA,KAAc,MAAGA,KAAc,OAC/CA,SAGNZ,OAAOkU,KAAKzU,GAAW0U,QAAOkF,GAAQvL,EAAWrO,EAAU4Z,MAlmBxDpV,SAAQgT,IACdnO,EAAOmO,GAAUnO,EAAOmO,GAAQkF,KAAKrT,MAEhCA,EAJT,IAAyBA,EA+oBzB,MAAM,gCACJhK,GAA+B,8BAC/BqM,GAA6B,YAC7BC,IACErM,EAYJ,SAASqd,GAASld,EAAMwN,GACtB,IAAI,IACF+M,EAAG,SACHxK,EAAQ,QACR3Q,GACEoO,EAQJ,OAPIvB,GAA8B8F,IAAI/R,IAAO8S,EAAM,kBAAkB9S,6BACrEiM,GAA8BoF,IAAIrR,EAAMub,GAAgB,CACtDvb,KAAAA,EACAua,IAAAA,EACAxK,SAAAA,EACA3Q,QAAAA,KAEK6M,GAQT,SAASkR,GAAWnd,GAIlB,OAHKiM,GAA8B8F,IAAI/R,IAAO8S,EAAM,kBAAkB9S,2BACtEiM,GAA8BmF,OAAOpR,GACrCN,GAAWW,OAAOL,GACXiM,GAUT,SAASiD,GAAMnL,EAAU6Y,EAAc5c,GACrC,OAAOV,GAAEyE,GAAU9D,KAAIoO,GAtFzB,SAAwBA,EAASuO,EAAcQ,GAC7C,MAAMpd,EAAOod,GAAiBtC,GAAQzM,GAKtC,OAJKhE,EAAgC0H,IAAI/R,IAAO8S,EAAM,wBAAwB9S,2BAC5DqK,EAAgCmG,IAAIxQ,EAApCqK,CAA0C,CAC1D7J,MAAOoc,IAEQ1N,MAAMb,GAgFWgP,CAAehP,EAASuO,EAAc5c,KAS1E,SAASI,GAAQ2D,EAAUuZ,GACzB,OAAOhe,GAAEyE,GAAU9D,KAAIoO,IACjBA,EAAQzO,KACVyO,EAAQzO,IAAiCQ,QAAQkd,GAG5CjP,KASX,SAASkP,GAAQC,GAIf,OAHK5O,EAAW4O,IAAS1K,EAAM,oCAC3B5G,GAAY6F,IAAIyL,IAAS1K,EAAM,qCACnC5G,GAAYoO,IAAIkD,GACTtR,GAQT,SAASuR,GAAUD,GAGjB,OAFKtR,GAAY6F,IAAIyL,IAAS1K,EAAM,mCACpC5G,GAAYkF,OAAOoM,GACZtR,GAQT,SAAS3L,GAAUmd,GACjB,OAAO,SAAUxd,EAAIM,EAAOmd,GAC1B,IAAI,MACF7G,EAAK,WACLxD,EAAU,YACVlE,QACY,IAAVuO,EAAmB,GAAKA,EAC5B,OApHJ,WACE,IAAK,IAAI/C,EAAQzS,UAAUvG,OAAQgc,EAAM,IAAIxZ,MAAMwW,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IACnF+C,EAAI/C,GAAS1S,UAAU0S,GAGzB,OAAO+C,EAAI/U,QAAO,CAACgV,EAAGC,IAAM,WAC1B,OAAOD,EAAEC,KAAK3V,eA8GP4V,EAAQtU,GAAKA,EAAEyF,MAAMhP,EAAIkP,KAAc3F,GAAKA,EAAE,CACnDjJ,MAAAA,EACAsW,MAAAA,EACAxD,WAAAA,KACEiI,GAJGwC,CAIcL,IASzB,SAASM,GAAKC,GAGZ,OAFKrP,EAAWqP,IAAOnL,EAAM,uDAC7BmL,EAAKvS,IAAkB,EAChBuS,EAQT,MAAMC,GAAY3d,GAAaA,EAGzB4d,GAAU,SAEVxe,GAAK,CACTD,WAAAA,GACAka,YAAAA,GACA2B,gBAAAA,GACAW,gBAAAA,GACArc,QAAAA,kBC5/EF,IAAII,EAAM,CACT,uCAAwC,IACxC,mCAAoC,IACpC,2BAA4B,IAC5B,yBAA0B,KAI3B,SAASme,EAAeC,GACvB,IAAIpV,EAAKqV,EAAsBD,GAC/B,OAAOE,EAAoBtV,GAE5B,SAASqV,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEve,EAAKoe,GAAM,CACpC,IAAI7e,EAAI,IAAIwT,MAAM,uBAAyBqL,EAAM,KAEjD,MADA7e,EAAEif,KAAO,mBACHjf,EAEP,OAAOS,EAAIoe,GAEZD,EAAepJ,KAAO,WACrB,OAAOlU,OAAOkU,KAAK/U,IAEpBme,EAAeM,QAAUJ,EACzBjY,EAAOjH,QAAUgf,EACjBA,EAAenV,GAAK,yDCvBpB,MACM0V,EAA0B,OAG9BA,EAAwB3J,OAAO/U,KAAI2e,IACjC,MAAM5e,EALO,EAAC4e,EAAMC,EAAY,KAAOD,EAAKxZ,MAAM,KAAK0Z,UAAU,GAAGxX,QAAQuX,EAAW,IAK1EE,CAASH,EAAM,SAEtBre,EAAYoe,EAAwBC,GAG1C,OAFA,IAAA1B,UAASld,EAAMO,EAAUM,SAAWN,GAE7B,CACLP,KAAAA,EACAO,UAAAA,OCLN,IAAA2O,OAAM","sources":["webpack://first-riot/./node_modules/@riotjs/hot-reload/index.js","webpack://first-riot/./src/components/global/hash-container/hash-container.riot","webpack://first-riot/./src/components/global/hash-element/hash-element.riot","webpack://first-riot/./src/components/global/hash-row/hash-row.riot","webpack://first-riot/./src/components/global/sidebar/sidebar.riot","webpack://first-riot/./src/components/includes/user/user.riot","webpack://first-riot/./node_modules/bianco.query/index.next.js","webpack://first-riot/./node_modules/bianco.dom-to-array/index.next.js","webpack://first-riot/./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js","webpack://first-riot/./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js","webpack://first-riot/./src/style.css?e320","webpack://first-riot/./node_modules/riot/riot.esm.js","webpack://first-riot//Users/alixfachin/Code/NisekoNerds/riot/src/components/global|sync|/[a-zA-Z0-9-]+\\.riot/","webpack://first-riot/./src/register-global-components.js","webpack://first-riot/./src/index.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('riot'), require('bianco.query')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'riot', 'bianco.query'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.riotHotReload = {}, global.riot, global.$));\n}(this, (function (exports, riot, $) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  var $__default = /*#__PURE__*/_interopDefaultLegacy($);\n\n  const { cssManager } = riot.__;\n  const { DOM_COMPONENT_INSTANCE_PROPERTY } = riot.__.globals;\n\n  function reload(componentAPI) {\n    const {name} = componentAPI;\n\n    if (!name) {\n      console.warn('Anonymous components can not be reloaded'); // eslint-disable-line\n      return []\n    }\n\n    return $__default['default'](`${name}, [is=${name}]`).map(el => {\n      const oldTag = el[DOM_COMPONENT_INSTANCE_PROPERTY];\n\n      // early return in case there is no riot instance found\n      if (!oldTag) return\n\n      // remove the tag template from the DOM\n      oldTag.unmount(true);\n      // delete the old css from the css manager\n      cssManager.remove(name);\n\n      // create the new tag\n      const newTag = riot.component(componentAPI)(el, oldTag.props);\n      newTag.update(oldTag.state);\n\n      return newTag\n    })\n  }\n\n  exports.default = reload;\n  exports.reload = reload;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","<hash-container>\n    <div class=\"hash-container-panel\">\n        <div class=\"control-panel\">\n            <p class=\"help\"> The aim is to store (key, value) pairs. <br>The value will be determined by random. You can choose the hash function to try to optimize the result.\n            (Optimized result is when it takes the least amount of time to look for a value associated with a key, i.e. \n            when the values are uniformally distributed accross the table) <br>\n            HashTableの目標は(Key,Value)のペアーを効果的に保存すること。<br>\n            以下の図はKeyを入力すると、Valueはランダムに決定されています。KeyはHashFunctionによってテーブルの位置を決まってます。<br>\n            HashTableのデザインの目標は各列の長さを平等にすること。(そうすれば探し時間は割と短くなります).\n            )\n            \n            </p>\n\n            <label id=\"keyInputLbl\">Key Input</label>\n            <input id=\"keyInput\" onkeyup={fieldEdit} value={ state.newItemValue } />\n            <button id=\"keyInputBtn\" onclick={ addValue }>Add</button>\n            <label id=\"hashInputLbl\">Hash Function </label>\n            <div id=\"radioGroupHash\">\n                <label>String Length</label>\n                <input type=\"radio\" name=\"hashFunction\" id=\"hashLength\" value=\"length\" checked>\n                <label>Char Code sum</label>\n                <input type=\"radio\" name=\"hashFunction\" id=\"hashSumCode\" value=\"sumcode\">\n            </div>\n            <button id=\"resetBtn\" onclick={tableReset}>Reset Table</button>\n        </div>\n\n        <hash-row each={ (row,index) in state.hashArray }  index={index} rowContent={row}>\n        </hash-row>\n    </div>\n\n    <style>\n        .hash-container-panel {\n            width: 95%;\n            background-color: rgba(255,255,255,0.55);\n            -webkit-backdrop-filer: blur(10px);\n            backdrop-filter: blur(10px);\n            border-radius: 5px;\n            padding: 2em;\n            font-size: clamp(11px, 3vw,16px);\n        }\n\n        .control-panel {\n            display: grid;\n            grid-template-areas: \n            \"help help help\"\n            \"label1 field1 button1\"\n            \"label2 radiofield radiofield\"\n            \". resetBtn .\";\n            grid-template-columns: 1fr 2fr 1fr;\n            gap: 1em 5px;\n        }\n\n        @media( max-width: 500px) {\n            .control-panel {\n                grid-template-areas:\n                \"help help\"\n                \"label1 .\"\n                \"field1 button1\"\n                \"label2 .\"\n                \"radiofield radiofield\"\n                \"resetBtn resetBtn\";\n                grid-template-columns: 2fr 1fr;\n\n            }\n\n            \n\n        }\n\n\n        p.help {\n            font-size: small;\n            grid-area: help;\n        }\n        \n        #keyInputLbl {\n            grid-area: label1;\n            text-align:right;\n        }\n        #keyInput {\n            grid-area: field1;\n            margin-right: 1em;\n        }\n        #keyInputBtn {\n            grid-area: button1;\n        }\n\n        #hashInputLbl {\n            grid-area: label2;\n            text-align: right;\n        }\n        #radioGroupHash {\n            grid-area: radiofield;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n\n        #radioGroupHash > input {\n            margin-right: 2em;\n            margin-left: 0.5em;\n        }\n\n        #resetBtn {\n            grid-area: resetBtn;\n        }\n\n    </style>\n\n    <script>\n        import HashRow from \"../hash-row/hash-row.riot\";\n\n        export default function HashContainer() { \n\n            return {\n                components: {\n                    HashRow,\n                },\n                state: {\n                    hashArray: [],\n                    hashLength: 10,\n                    newItemValue: '',\n                },\n                getHashValue(newKey, arrayLength) {\n                    if (this.$('#hashLength').checked) {\n                        return (newKey.length % arrayLength)\n                    } else {\n                        let hashValue = 0;\n                        for (let x in newKey) {\n                            hashValue += newKey.charCodeAt(x);\n                        }\n                        console.log(`hash value: ${hashValue}`);\n                        return (hashValue % arrayLength)\n                    }\n                },\n                onBeforeMount(props, state ) {\n                    this.state.hashLength = props.hashLength || 10;                \n                    this.state.hashArray = [];\n                    for (let i=0; i<this.state.hashLength; i++) {\n                        this.state.hashArray.push([]);\n                    }\n                },\n                fieldEdit(e) {\n                    if (e.keyCode === 13) {\n                        e.preventDefault();\n                        this.addValue();\n                        this.update( {newItemValue: ''} );\n                    } else {\n                        this.update( { newItemValue: e.target.value  })\n                    }\n                },\n                addValue() {\n                    // getting the hash of newItemValue;\n                    const newHashValue = this.getHashValue(this.state.newItemValue, this.state.hashLength);\n                    // inserting the item at the proper column\n                    const newItem = { \n                        key: DOMPurify.sanitize(this.state.newItemValue), \n                        value: Math.floor(Math.random()*200) \n                    };\n                    this.state.hashArray[newHashValue].push(newItem);\n                    this.update( { hashArray: this.state.hashArray  } );\n                },\n                tableReset(e) {\n                    console.log('RESET!')\n                    this.state.hashArray = [];\n                    for (let i=0; i<this.state.hashLength; i++) {\n                        this.state.hashArray.push([]);\n                    }\n                    this.update( { hashArray: this.state.hashArray  } );\n                },\n            }\n        }\n\n    </script>\n\n</hash-container>","<hash-element>\n    <div class=\"key\"> { state.elementKey } </div>\n    <div class=\"value\"> { state.elementValue} </div>\n\n    <style>\n        :host {\n            text-align: center;\n            border: 1px solid blue;\n            border-radius: 10px;\n            background-color: lightgrey;\n            min-width: 4em;\n            box-sizing: margin-box;\n            display: block;\n            margin-right: 1em;\n            padding-left: 0.5em;\n            padding-right: 0.5em;\n        }\n    </style>\n\n    <script>\n        export default {\n            state: {\n                elementKey: '',\n                elementValue: '',\n            },\n            onBeforeMount(props, state) {\n                this.state.elementKey = DOMPurify.sanitize(props.elementKey);\n                this.state.elementValue = DOMPurify.sanitize(props.elementValue);\n            }\n        }\n    </script>\n\n</hash-element>","<hash-row>\n    <div class=\"hash-row-index\">{this.state.index} ➡️ </div>\n    <div each={ item in props.rowContent }>\n        <hash-element elementKey={item.key} elementValue={item.value}>\n        </hash-element>\n    </div>\n\n    <style>\n        :host {\n            display:flex;\n            flex-flow: row wrap;\n            align-items: center;\n            justify-content: flex-start;\n            border: 1px solid grey;\n            border-radius: min(10%, 10px);\n            padding: 10px 5px;\n            margin-bottom: 3px;\n            margin-top: 1em;\n        }\n\n        .hash-row-index {\n            text-align: center;\n            min-width: 4em;\n            background-color: #FEBE64;\n            border: 1px solid grey;\n            border-radius: 5px;\n            margin-left: 1em;\n            margin-right: 1em;\n        }\n\n        :host > div {\n            margin-top: 5px;\n            margin-bottom: 5px;\n        }\n\n\n    </style>\n\n    <script>\n    import HashElement from \"../hash-element/hash-element.riot\";\n\n    const testList =  { \"a\" : 13, \"b\" : 26, \"c\" : 46 };\n\n    export default function HashRow() {\n        return {\n            components: {\n                HashElement,\n            },\n            state: {\n                index: 1,\n                elements: [],\n            },\n            onBeforeMount(props, state) {\n                state.index = props.index || 0;\n                if (!props.rowContent || props.rowContent === []) {\n                    for (let x in testList) {\n                        state.elements.push( { key: x, value: testList[x] } );\n                    }\n                } else {\n                    state.elements = [ ...props.rowContent];\n                }\n            },\n            addElement(key, value) {\n                this.update({ elements: this.state.elements.push({ key: key, value: value })  });   \n            }\n        }\n    }\n\n    </script>\n\n</hash-row>","<sidebar>\n  <div>\n    <div class=\"row\">\n      <h1>Sidebar</h1>\n    </div>\n    <div if={state.showUser} class=\"row\">\n      <user name={ state.name }/>\n    </div>\n\n    <div class=\"row\">\n      <button onclick={toggleUser}>Toggle username</button>\n    </div>\n  </div>\n\n  <script>\n    import User from '../../includes/user/user.riot'\n\n    export default {\n      components: {\n        User\n      },\n      state: {\n        name: 'John',\n        showUser: false\n      },\n      toggleUser() {\n        this.update({\n          showUser: !this.state.showUser\n        })\n      }\n    }\n  </script>\n</sidebar>","<user>\n  <p>My username is: <b>{ props.name }</b></p>\n</user>","import domToArray from 'bianco.dom-to-array'\n\n/**\n * Simple helper to find DOM nodes returning them as array like loopable object\n * @param   { string|DOMNodeList } selector - either the query or the DOM nodes to arraify\n * @param   { HTMLElement }        ctx      - context defining where the query will search for the DOM nodes\n * @returns { Array } DOM nodes found as array\n */\nexport default function $(selector, ctx) {\n  return domToArray(typeof selector === 'string' ?\n    (ctx || document).querySelectorAll(selector) :\n    selector\n  )\n}\n","/**\n * Converts any DOM node/s to a loopable array\n * @param   { HTMLElement|NodeList } els - single html element or a node list\n * @returns { Array } always a loopable object\n */\nexport default function domToArray(els) {\n  // can this object be already looped?\n  if (!Array.isArray(els)) {\n    // is it a node list?\n    if (\n      /^\\[object (HTMLCollection|NodeList|Object)\\]$/\n        .test(Object.prototype.toString.call(els))\n        && typeof els.length === 'number'\n    )\n      return Array.from(els)\n    else\n      // if it's a single node\n      // it will be returned as \"array\" with one single entry\n      return [els]\n  }\n  // this object could be looped out of the box\n  return els\n}","\"use strict\";\n\n/* eslint-env browser */\n\n/*\n  eslint-disable\n  no-console,\n  func-names\n*/\nvar normalizeUrl = require(\"./normalize-url\");\n\nvar srcByModuleId = Object.create(null);\nvar noDocument = typeof document === \"undefined\";\nvar forEach = Array.prototype.forEach;\n\nfunction debounce(fn, time) {\n  var timeout = 0;\n  return function () {\n    var self = this; // eslint-disable-next-line prefer-rest-params\n\n    var args = arguments;\n\n    var functionCall = function functionCall() {\n      return fn.apply(self, args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(functionCall, time);\n  };\n}\n\nfunction noop() {}\n\nfunction getCurrentScriptUrl(moduleId) {\n  var src = srcByModuleId[moduleId];\n\n  if (!src) {\n    if (document.currentScript) {\n      src = document.currentScript.src;\n    } else {\n      var scripts = document.getElementsByTagName(\"script\");\n      var lastScriptTag = scripts[scripts.length - 1];\n\n      if (lastScriptTag) {\n        src = lastScriptTag.src;\n      }\n    }\n\n    srcByModuleId[moduleId] = src;\n  }\n\n  return function (fileMap) {\n    if (!src) {\n      return null;\n    }\n\n    var splitResult = src.split(/([^\\\\/]+)\\.js$/);\n    var filename = splitResult && splitResult[1];\n\n    if (!filename) {\n      return [src.replace(\".js\", \".css\")];\n    }\n\n    if (!fileMap) {\n      return [src.replace(\".js\", \".css\")];\n    }\n\n    return fileMap.split(\",\").map(function (mapRule) {\n      var reg = new RegExp(\"\".concat(filename, \"\\\\.js$\"), \"g\");\n      return normalizeUrl(src.replace(reg, \"\".concat(mapRule.replace(/{fileName}/g, filename), \".css\")));\n    });\n  };\n}\n\nfunction updateCss(el, url) {\n  if (!url) {\n    if (!el.href) {\n      return;\n    } // eslint-disable-next-line\n\n\n    url = el.href.split(\"?\")[0];\n  }\n\n  if (!isUrlRequest(url)) {\n    return;\n  }\n\n  if (el.isLoaded === false) {\n    // We seem to be about to replace a css link that hasn't loaded yet.\n    // We're probably changing the same file more than once.\n    return;\n  }\n\n  if (!url || !(url.indexOf(\".css\") > -1)) {\n    return;\n  } // eslint-disable-next-line no-param-reassign\n\n\n  el.visited = true;\n  var newEl = el.cloneNode();\n  newEl.isLoaded = false;\n  newEl.addEventListener(\"load\", function () {\n    if (newEl.isLoaded) {\n      return;\n    }\n\n    newEl.isLoaded = true;\n    el.parentNode.removeChild(el);\n  });\n  newEl.addEventListener(\"error\", function () {\n    if (newEl.isLoaded) {\n      return;\n    }\n\n    newEl.isLoaded = true;\n    el.parentNode.removeChild(el);\n  });\n  newEl.href = \"\".concat(url, \"?\").concat(Date.now());\n\n  if (el.nextSibling) {\n    el.parentNode.insertBefore(newEl, el.nextSibling);\n  } else {\n    el.parentNode.appendChild(newEl);\n  }\n}\n\nfunction getReloadUrl(href, src) {\n  var ret; // eslint-disable-next-line no-param-reassign\n\n  href = normalizeUrl(href, {\n    stripWWW: false\n  }); // eslint-disable-next-line array-callback-return\n\n  src.some(function (url) {\n    if (href.indexOf(src) > -1) {\n      ret = url;\n    }\n  });\n  return ret;\n}\n\nfunction reloadStyle(src) {\n  if (!src) {\n    return false;\n  }\n\n  var elements = document.querySelectorAll(\"link\");\n  var loaded = false;\n  forEach.call(elements, function (el) {\n    if (!el.href) {\n      return;\n    }\n\n    var url = getReloadUrl(el.href, src);\n\n    if (!isUrlRequest(url)) {\n      return;\n    }\n\n    if (el.visited === true) {\n      return;\n    }\n\n    if (url) {\n      updateCss(el, url);\n      loaded = true;\n    }\n  });\n  return loaded;\n}\n\nfunction reloadAll() {\n  var elements = document.querySelectorAll(\"link\");\n  forEach.call(elements, function (el) {\n    if (el.visited === true) {\n      return;\n    }\n\n    updateCss(el);\n  });\n}\n\nfunction isUrlRequest(url) {\n  // An URL is not an request if\n  // It is not http or https\n  if (!/^https?:/i.test(url)) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = function (moduleId, options) {\n  if (noDocument) {\n    console.log(\"no window.document found, will not HMR CSS\");\n    return noop;\n  }\n\n  var getScriptSrc = getCurrentScriptUrl(moduleId);\n\n  function update() {\n    var src = getScriptSrc(options.filename);\n    var reloaded = reloadStyle(src);\n\n    if (options.locals) {\n      console.log(\"[HMR] Detected local css modules. Reload all css\");\n      reloadAll();\n      return;\n    }\n\n    if (reloaded) {\n      console.log(\"[HMR] css reload %s\", src.join(\" \"));\n    } else {\n      console.log(\"[HMR] Reload all css\");\n      reloadAll();\n    }\n  }\n\n  return debounce(update, 50);\n};","\"use strict\";\n\n/* eslint-disable */\nfunction normalizeUrl(pathComponents) {\n  return pathComponents.reduce(function (accumulator, item) {\n    switch (item) {\n      case \"..\":\n        accumulator.pop();\n        break;\n\n      case \".\":\n        break;\n\n      default:\n        accumulator.push(item);\n    }\n\n    return accumulator;\n  }, []).join(\"/\");\n}\n\nmodule.exports = function (urlString) {\n  urlString = urlString.trim();\n\n  if (/^data:/i.test(urlString)) {\n    return urlString;\n  }\n\n  var protocol = urlString.indexOf(\"//\") !== -1 ? urlString.split(\"//\")[0] + \"//\" : \"\";\n  var components = urlString.replace(new RegExp(protocol, \"i\"), \"\").split(\"/\");\n  var host = components[0].toLowerCase().replace(/\\.$/, \"\");\n  components[0] = \"\";\n  var path = normalizeUrl(components);\n  return protocol + host + path;\n};","// extracted by mini-css-extract-plugin\nexport {};\n    if(module.hot) {\n      // 1630303215340\n      var cssReload = require(\"/Users/alixfachin/Code/NisekoNerds/riot/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","/* Riot v6.0.2, @license MIT */\n/**\n * Convert a string from camel case to dash-case\n * @param   {string} string - probably a component tag name\n * @returns {string} component name normalized\n */\nfunction camelToDashCase(string) {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n/**\n * Convert a string containing dashes to camel case\n * @param   {string} string - input string\n * @returns {string} my-string -> myString\n */\n\nfunction dashToCamelCase(string) {\n  return string.replace(/-(\\w)/g, (_, c) => c.toUpperCase());\n}\n\n/**\n * Get all the element attributes as object\n * @param   {HTMLElement} element - DOM node we want to parse\n * @returns {Object} all the attributes found as a key value pairs\n */\n\nfunction DOMattributesToObject(element) {\n  return Array.from(element.attributes).reduce((acc, attribute) => {\n    acc[dashToCamelCase(attribute.name)] = attribute.value;\n    return acc;\n  }, {});\n}\n/**\n * Move all the child nodes from a source tag to another\n * @param   {HTMLElement} source - source node\n * @param   {HTMLElement} target - target node\n * @returns {undefined} it's a void method ¯\\_(ツ)_/¯\n */\n// Ignore this helper because it's needed only for svg tags\n\nfunction moveChildren(source, target) {\n  if (source.firstChild) {\n    target.appendChild(source.firstChild);\n    moveChildren(source, target);\n  }\n}\n/**\n * Remove the child nodes from any DOM node\n * @param   {HTMLElement} node - target node\n * @returns {undefined}\n */\n\nfunction cleanNode(node) {\n  clearChildren(node.childNodes);\n}\n/**\n * Clear multiple children in a node\n * @param   {HTMLElement[]} children - direct children nodes\n * @returns {undefined}\n */\n\nfunction clearChildren(children) {\n  Array.from(children).forEach(removeChild);\n}\n/**\n * Remove a node\n * @param {HTMLElement}node - node to remove\n * @returns {undefined}\n */\n\nconst removeChild = node => node && node.parentNode && node.parentNode.removeChild(node);\n/**\n * Insert before a node\n * @param {HTMLElement} newNode - node to insert\n * @param {HTMLElement} refNode - ref child\n * @returns {undefined}\n */\n\nconst insertBefore = (newNode, refNode) => refNode && refNode.parentNode && refNode.parentNode.insertBefore(newNode, refNode);\n/**\n * Replace a node\n * @param {HTMLElement} newNode - new node to add to the DOM\n * @param {HTMLElement} replaced - node to replace\n * @returns {undefined}\n */\n\nconst replaceChild = (newNode, replaced) => replaced && replaced.parentNode && replaced.parentNode.replaceChild(newNode, replaced);\n\n// Riot.js constants that can be used accross more modules\nconst COMPONENTS_IMPLEMENTATION_MAP$1 = new Map(),\n      DOM_COMPONENT_INSTANCE_PROPERTY$1 = Symbol('riot-component'),\n      PLUGINS_SET$1 = new Set(),\n      IS_DIRECTIVE = 'is',\n      VALUE_ATTRIBUTE = 'value',\n      MOUNT_METHOD_KEY = 'mount',\n      UPDATE_METHOD_KEY = 'update',\n      UNMOUNT_METHOD_KEY = 'unmount',\n      SHOULD_UPDATE_KEY = 'shouldUpdate',\n      ON_BEFORE_MOUNT_KEY = 'onBeforeMount',\n      ON_MOUNTED_KEY = 'onMounted',\n      ON_BEFORE_UPDATE_KEY = 'onBeforeUpdate',\n      ON_UPDATED_KEY = 'onUpdated',\n      ON_BEFORE_UNMOUNT_KEY = 'onBeforeUnmount',\n      ON_UNMOUNTED_KEY = 'onUnmounted',\n      PROPS_KEY = 'props',\n      STATE_KEY = 'state',\n      SLOTS_KEY = 'slots',\n      ROOT_KEY = 'root',\n      IS_PURE_SYMBOL = Symbol('pure'),\n      IS_COMPONENT_UPDATING = Symbol('is_updating'),\n      PARENT_KEY_SYMBOL = Symbol('parent'),\n      ATTRIBUTES_KEY_SYMBOL = Symbol('attributes'),\n      TEMPLATE_KEY_SYMBOL = Symbol('template');\n\nvar globals = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  COMPONENTS_IMPLEMENTATION_MAP: COMPONENTS_IMPLEMENTATION_MAP$1,\n  DOM_COMPONENT_INSTANCE_PROPERTY: DOM_COMPONENT_INSTANCE_PROPERTY$1,\n  PLUGINS_SET: PLUGINS_SET$1,\n  IS_DIRECTIVE: IS_DIRECTIVE,\n  VALUE_ATTRIBUTE: VALUE_ATTRIBUTE,\n  MOUNT_METHOD_KEY: MOUNT_METHOD_KEY,\n  UPDATE_METHOD_KEY: UPDATE_METHOD_KEY,\n  UNMOUNT_METHOD_KEY: UNMOUNT_METHOD_KEY,\n  SHOULD_UPDATE_KEY: SHOULD_UPDATE_KEY,\n  ON_BEFORE_MOUNT_KEY: ON_BEFORE_MOUNT_KEY,\n  ON_MOUNTED_KEY: ON_MOUNTED_KEY,\n  ON_BEFORE_UPDATE_KEY: ON_BEFORE_UPDATE_KEY,\n  ON_UPDATED_KEY: ON_UPDATED_KEY,\n  ON_BEFORE_UNMOUNT_KEY: ON_BEFORE_UNMOUNT_KEY,\n  ON_UNMOUNTED_KEY: ON_UNMOUNTED_KEY,\n  PROPS_KEY: PROPS_KEY,\n  STATE_KEY: STATE_KEY,\n  SLOTS_KEY: SLOTS_KEY,\n  ROOT_KEY: ROOT_KEY,\n  IS_PURE_SYMBOL: IS_PURE_SYMBOL,\n  IS_COMPONENT_UPDATING: IS_COMPONENT_UPDATING,\n  PARENT_KEY_SYMBOL: PARENT_KEY_SYMBOL,\n  ATTRIBUTES_KEY_SYMBOL: ATTRIBUTES_KEY_SYMBOL,\n  TEMPLATE_KEY_SYMBOL: TEMPLATE_KEY_SYMBOL\n});\n\nconst EACH = 0;\nconst IF = 1;\nconst SIMPLE = 2;\nconst TAG = 3;\nconst SLOT = 4;\nvar bindingTypes = {\n  EACH,\n  IF,\n  SIMPLE,\n  TAG,\n  SLOT\n};\n\nconst ATTRIBUTE = 0;\nconst EVENT = 1;\nconst TEXT = 2;\nconst VALUE = 3;\nvar expressionTypes = {\n  ATTRIBUTE,\n  EVENT,\n  TEXT,\n  VALUE\n};\n\nconst HEAD_SYMBOL = Symbol('head');\nconst TAIL_SYMBOL = Symbol('tail');\n\n/**\n * Create the <template> fragments text nodes\n * @return {Object} {{head: Text, tail: Text}}\n */\n\nfunction createHeadTailPlaceholders() {\n  const head = document.createTextNode('');\n  const tail = document.createTextNode('');\n  head[HEAD_SYMBOL] = true;\n  tail[TAIL_SYMBOL] = true;\n  return {\n    head,\n    tail\n  };\n}\n\n/**\n * Create the template meta object in case of <template> fragments\n * @param   {TemplateChunk} componentTemplate - template chunk object\n * @returns {Object} the meta property that will be passed to the mount function of the TemplateChunk\n */\n\nfunction createTemplateMeta(componentTemplate) {\n  const fragment = componentTemplate.dom.cloneNode(true);\n  const {\n    head,\n    tail\n  } = createHeadTailPlaceholders();\n  return {\n    avoidDOMInjection: true,\n    fragment,\n    head,\n    tail,\n    children: [head, ...Array.from(fragment.childNodes), tail]\n  };\n}\n\n/**\n * Helper function to set an immutable property\n * @param   {Object} source - object where the new property will be set\n * @param   {string} key - object key where the new property will be stored\n * @param   {*} value - value of the new property\n * @param   {Object} options - set the propery overriding the default options\n * @returns {Object} - the original object modified\n */\nfunction defineProperty(source, key, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  /* eslint-disable fp/no-mutating-methods */\n  Object.defineProperty(source, key, Object.assign({\n    value,\n    enumerable: false,\n    writable: false,\n    configurable: true\n  }, options));\n  /* eslint-enable fp/no-mutating-methods */\n\n  return source;\n}\n/**\n * Define multiple properties on a target object\n * @param   {Object} source - object where the new properties will be set\n * @param   {Object} properties - object containing as key pair the key + value properties\n * @param   {Object} options - set the propery overriding the default options\n * @returns {Object} the original object modified\n */\n\nfunction defineProperties(source, properties, options) {\n  Object.entries(properties).forEach(_ref => {\n    let [key, value] = _ref;\n    defineProperty(source, key, value, options);\n  });\n  return source;\n}\n/**\n * Define default properties if they don't exist on the source object\n * @param   {Object} source - object that will receive the default properties\n * @param   {Object} defaults - object containing additional optional keys\n * @returns {Object} the original object received enhanced\n */\n\nfunction defineDefaults(source, defaults) {\n  Object.entries(defaults).forEach(_ref2 => {\n    let [key, value] = _ref2;\n    if (!source[key]) source[key] = value;\n  });\n  return source;\n}\n\n/**\n * Get the current <template> fragment children located in between the head and tail comments\n * @param {Comment} head - head comment node\n * @param {Comment} tail - tail comment node\n * @return {Array[]} children list of the nodes found in this template fragment\n */\n\nfunction getFragmentChildren(_ref) {\n  let {\n    head,\n    tail\n  } = _ref;\n  const nodes = walkNodes([head], head.nextSibling, n => n === tail, false);\n  nodes.push(tail);\n  return nodes;\n}\n/**\n * Recursive function to walk all the <template> children nodes\n * @param {Array[]} children - children nodes collection\n * @param {ChildNode} node - current node\n * @param {Function} check - exit function check\n * @param {boolean} isFilterActive - filter flag to skip nodes managed by other bindings\n * @returns {Array[]} children list of the nodes found in this template fragment\n */\n\nfunction walkNodes(children, node, check, isFilterActive) {\n  const {\n    nextSibling\n  } = node; // filter tail and head nodes together with all the nodes in between\n  // this is needed only to fix a really ugly edge case https://github.com/riot/riot/issues/2892\n\n  if (!isFilterActive && !node[HEAD_SYMBOL] && !node[TAIL_SYMBOL]) {\n    children.push(node);\n  }\n\n  if (!nextSibling || check(node)) return children;\n  return walkNodes(children, nextSibling, check, // activate the filters to skip nodes between <template> fragments that will be managed by other bindings\n  isFilterActive && !node[TAIL_SYMBOL] || nextSibling[HEAD_SYMBOL]);\n}\n\n/**\n * Quick type checking\n * @param   {*} element - anything\n * @param   {string} type - type definition\n * @returns {boolean} true if the type corresponds\n */\nfunction checkType(element, type) {\n  return typeof element === type;\n}\n/**\n * Check if an element is part of an svg\n * @param   {HTMLElement}  el - element to check\n * @returns {boolean} true if we are in an svg context\n */\n\nfunction isSvg(el) {\n  const owner = el.ownerSVGElement;\n  return !!owner || owner === null;\n}\n/**\n * Check if an element is a template tag\n * @param   {HTMLElement}  el - element to check\n * @returns {boolean} true if it's a <template>\n */\n\nfunction isTemplate(el) {\n  return el.tagName.toLowerCase() === 'template';\n}\n/**\n * Check that will be passed if its argument is a function\n * @param   {*} value - value to check\n * @returns {boolean} - true if the value is a function\n */\n\nfunction isFunction(value) {\n  return checkType(value, 'function');\n}\n/**\n * Check if a value is a Boolean\n * @param   {*}  value - anything\n * @returns {boolean} true only for the value is a boolean\n */\n\nfunction isBoolean(value) {\n  return checkType(value, 'boolean');\n}\n/**\n * Check if a value is an Object\n * @param   {*}  value - anything\n * @returns {boolean} true only for the value is an object\n */\n\nfunction isObject(value) {\n  return !isNil(value) && value.constructor === Object;\n}\n/**\n * Check if a value is null or undefined\n * @param   {*}  value - anything\n * @returns {boolean} true only for the 'undefined' and 'null' types\n */\n\nfunction isNil(value) {\n  return value === null || value === undefined;\n}\n\n/**\n * ISC License\n *\n * Copyright (c) 2020, Andrea Giammarchi, @WebReflection\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n// fork of https://github.com/WebReflection/udomdiff version 1.1.0\n// due to https://github.com/WebReflection/udomdiff/pull/2\n\n/* eslint-disable */\n\n/**\n * @param {Node[]} a The list of current/live children\n * @param {Node[]} b The list of future children\n * @param {(entry: Node, action: number) => Node} get\n * The callback invoked per each entry related DOM operation.\n * @param {Node} [before] The optional node used as anchor to insert before.\n * @returns {Node[]} The same list of future children.\n */\n\nvar udomdiff = ((a, b, get, before) => {\n  const bLength = b.length;\n  let aEnd = a.length;\n  let bEnd = bLength;\n  let aStart = 0;\n  let bStart = 0;\n  let map = null;\n\n  while (aStart < aEnd || bStart < bEnd) {\n    // append head, tail, or nodes in between: fast path\n    if (aEnd === aStart) {\n      // we could be in a situation where the rest of nodes that\n      // need to be added are not at the end, and in such case\n      // the node to `insertBefore`, if the index is more than 0\n      // must be retrieved, otherwise it's gonna be the first item.\n      const node = bEnd < bLength ? bStart ? get(b[bStart - 1], -0).nextSibling : get(b[bEnd - bStart], 0) : before;\n\n      while (bStart < bEnd) insertBefore(get(b[bStart++], 1), node);\n    } // remove head or tail: fast path\n    else if (bEnd === bStart) {\n      while (aStart < aEnd) {\n        // remove the node only if it's unknown or not live\n        if (!map || !map.has(a[aStart])) removeChild(get(a[aStart], -1));\n        aStart++;\n      }\n    } // same node: fast path\n    else if (a[aStart] === b[bStart]) {\n      aStart++;\n      bStart++;\n    } // same tail: fast path\n    else if (a[aEnd - 1] === b[bEnd - 1]) {\n      aEnd--;\n      bEnd--;\n    } // The once here single last swap \"fast path\" has been removed in v1.1.0\n    // https://github.com/WebReflection/udomdiff/blob/single-final-swap/esm/index.js#L69-L85\n    // reverse swap: also fast path\n    else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {\n      // this is a \"shrink\" operation that could happen in these cases:\n      // [1, 2, 3, 4, 5]\n      // [1, 4, 3, 2, 5]\n      // or asymmetric too\n      // [1, 2, 3, 4, 5]\n      // [1, 2, 3, 5, 6, 4]\n      const node = get(a[--aEnd], -1).nextSibling;\n      insertBefore(get(b[bStart++], 1), get(a[aStart++], -1).nextSibling);\n      insertBefore(get(b[--bEnd], 1), node); // mark the future index as identical (yeah, it's dirty, but cheap 👍)\n      // The main reason to do this, is that when a[aEnd] will be reached,\n      // the loop will likely be on the fast path, as identical to b[bEnd].\n      // In the best case scenario, the next loop will skip the tail,\n      // but in the worst one, this node will be considered as already\n      // processed, bailing out pretty quickly from the map index check\n\n      a[aEnd] = b[bEnd];\n    } // map based fallback, \"slow\" path\n    else {\n      // the map requires an O(bEnd - bStart) operation once\n      // to store all future nodes indexes for later purposes.\n      // In the worst case scenario, this is a full O(N) cost,\n      // and such scenario happens at least when all nodes are different,\n      // but also if both first and last items of the lists are different\n      if (!map) {\n        map = new Map();\n        let i = bStart;\n\n        while (i < bEnd) map.set(b[i], i++);\n      } // if it's a future node, hence it needs some handling\n\n\n      if (map.has(a[aStart])) {\n        // grab the index of such node, 'cause it might have been processed\n        const index = map.get(a[aStart]); // if it's not already processed, look on demand for the next LCS\n\n        if (bStart < index && index < bEnd) {\n          let i = aStart; // counts the amount of nodes that are the same in the future\n\n          let sequence = 1;\n\n          while (++i < aEnd && i < bEnd && map.get(a[i]) === index + sequence) sequence++; // effort decision here: if the sequence is longer than replaces\n          // needed to reach such sequence, which would brings again this loop\n          // to the fast path, prepend the difference before a sequence,\n          // and move only the future list index forward, so that aStart\n          // and bStart will be aligned again, hence on the fast path.\n          // An example considering aStart and bStart are both 0:\n          // a: [1, 2, 3, 4]\n          // b: [7, 1, 2, 3, 6]\n          // this would place 7 before 1 and, from that time on, 1, 2, and 3\n          // will be processed at zero cost\n\n\n          if (sequence > index - bStart) {\n            const node = get(a[aStart], 0);\n\n            while (bStart < index) insertBefore(get(b[bStart++], 1), node);\n          } // if the effort wasn't good enough, fallback to a replace,\n          // moving both source and target indexes forward, hoping that some\n          // similar node will be found later on, to go back to the fast path\n          else {\n            replaceChild(get(b[bStart++], 1), get(a[aStart++], -1));\n          }\n        } // otherwise move the source forward, 'cause there's nothing to do\n        else aStart++;\n      } // this node has no meaning in the future list, so it's more than safe\n      // to remove it, and check the next live node out instead, meaning\n      // that only the live list index should be forwarded\n      else removeChild(get(a[aStart++], -1));\n    }\n  }\n\n  return b;\n});\n\nconst UNMOUNT_SCOPE = Symbol('unmount');\nconst EachBinding = {\n  // dynamic binding properties\n  // childrenMap: null,\n  // node: null,\n  // root: null,\n  // condition: null,\n  // evaluate: null,\n  // template: null,\n  // isTemplateTag: false,\n  nodes: [],\n\n  // getKey: null,\n  // indexName: null,\n  // itemName: null,\n  // afterPlaceholder: null,\n  // placeholder: null,\n  // API methods\n  mount(scope, parentScope) {\n    return this.update(scope, parentScope);\n  },\n\n  update(scope, parentScope) {\n    const {\n      placeholder,\n      nodes,\n      childrenMap\n    } = this;\n    const collection = scope === UNMOUNT_SCOPE ? null : this.evaluate(scope);\n    const items = collection ? Array.from(collection) : []; // prepare the diffing\n\n    const {\n      newChildrenMap,\n      batches,\n      futureNodes\n    } = createPatch(items, scope, parentScope, this); // patch the DOM only if there are new nodes\n\n    udomdiff(nodes, futureNodes, patch(Array.from(childrenMap.values()), parentScope), placeholder); // trigger the mounts and the updates\n\n    batches.forEach(fn => fn()); // update the children map\n\n    this.childrenMap = newChildrenMap;\n    this.nodes = futureNodes; // make sure that the loop edge nodes are marked\n\n    markEdgeNodes(this.nodes);\n    return this;\n  },\n\n  unmount(scope, parentScope) {\n    this.update(UNMOUNT_SCOPE, parentScope);\n    return this;\n  }\n\n};\n/**\n * Patch the DOM while diffing\n * @param   {any[]} redundant - list of all the children (template, nodes, context) added via each\n * @param   {*} parentScope - scope of the parent template\n * @returns {Function} patch function used by domdiff\n */\n\nfunction patch(redundant, parentScope) {\n  return (item, info) => {\n    if (info < 0) {\n      // get the last element added to the childrenMap saved previously\n      const element = redundant[redundant.length - 1];\n\n      if (element) {\n        // get the nodes and the template in stored in the last child of the childrenMap\n        const {\n          template,\n          nodes,\n          context\n        } = element; // remove the last node (notice <template> tags might have more children nodes)\n\n        nodes.pop(); // notice that we pass null as last argument because\n        // the root node and its children will be removed by domdiff\n\n        if (!nodes.length) {\n          // we have cleared all the children nodes and we can unmount this template\n          redundant.pop();\n          template.unmount(context, parentScope, null);\n        }\n      }\n    }\n\n    return item;\n  };\n}\n/**\n * Check whether a template must be filtered from a loop\n * @param   {Function} condition - filter function\n * @param   {Object} context - argument passed to the filter function\n * @returns {boolean} true if this item should be skipped\n */\n\n\nfunction mustFilterItem(condition, context) {\n  return condition ? !condition(context) : false;\n}\n/**\n * Extend the scope of the looped template\n * @param   {Object} scope - current template scope\n * @param   {Object} options - options\n * @param   {string} options.itemName - key to identify the looped item in the new context\n * @param   {string} options.indexName - key to identify the index of the looped item\n * @param   {number} options.index - current index\n * @param   {*} options.item - collection item looped\n * @returns {Object} enhanced scope object\n */\n\n\nfunction extendScope(scope, _ref) {\n  let {\n    itemName,\n    indexName,\n    index,\n    item\n  } = _ref;\n  defineProperty(scope, itemName, item);\n  if (indexName) defineProperty(scope, indexName, index);\n  return scope;\n}\n/**\n * Mark the first and last nodes in order to ignore them in case we need to retrieve the <template> fragment nodes\n * @param {Array[]} nodes - each binding nodes list\n * @returns {undefined} void function\n */\n\n\nfunction markEdgeNodes(nodes) {\n  const first = nodes[0];\n  const last = nodes[nodes.length - 1];\n  if (first) first[HEAD_SYMBOL] = true;\n  if (last) last[TAIL_SYMBOL] = true;\n}\n/**\n * Loop the current template items\n * @param   {Array} items - expression collection value\n * @param   {*} scope - template scope\n * @param   {*} parentScope - scope of the parent template\n * @param   {EachBinding} binding - each binding object instance\n * @returns {Object} data\n * @returns {Map} data.newChildrenMap - a Map containing the new children template structure\n * @returns {Array} data.batches - array containing the template lifecycle functions to trigger\n * @returns {Array} data.futureNodes - array containing the nodes we need to diff\n */\n\n\nfunction createPatch(items, scope, parentScope, binding) {\n  const {\n    condition,\n    template,\n    childrenMap,\n    itemName,\n    getKey,\n    indexName,\n    root,\n    isTemplateTag\n  } = binding;\n  const newChildrenMap = new Map();\n  const batches = [];\n  const futureNodes = [];\n  items.forEach((item, index) => {\n    const context = extendScope(Object.create(scope), {\n      itemName,\n      indexName,\n      index,\n      item\n    });\n    const key = getKey ? getKey(context) : index;\n    const oldItem = childrenMap.get(key);\n    const nodes = [];\n\n    if (mustFilterItem(condition, context)) {\n      return;\n    }\n\n    const mustMount = !oldItem;\n    const componentTemplate = oldItem ? oldItem.template : template.clone();\n    const el = componentTemplate.el || root.cloneNode();\n    const meta = isTemplateTag && mustMount ? createTemplateMeta(componentTemplate) : componentTemplate.meta;\n\n    if (mustMount) {\n      batches.push(() => componentTemplate.mount(el, context, parentScope, meta));\n    } else {\n      batches.push(() => componentTemplate.update(context, parentScope));\n    } // create the collection of nodes to update or to add\n    // in case of template tags we need to add all its children nodes\n\n\n    if (isTemplateTag) {\n      nodes.push(...(mustMount ? meta.children : getFragmentChildren(meta)));\n    } else {\n      nodes.push(el);\n    } // delete the old item from the children map\n\n\n    childrenMap.delete(key);\n    futureNodes.push(...nodes); // update the children map\n\n    newChildrenMap.set(key, {\n      nodes,\n      template: componentTemplate,\n      context,\n      index\n    });\n  });\n  return {\n    newChildrenMap,\n    batches,\n    futureNodes\n  };\n}\n\nfunction create$6(node, _ref2) {\n  let {\n    evaluate,\n    condition,\n    itemName,\n    indexName,\n    getKey,\n    template\n  } = _ref2;\n  const placeholder = document.createTextNode('');\n  const root = node.cloneNode();\n  insertBefore(placeholder, node);\n  removeChild(node);\n  return Object.assign({}, EachBinding, {\n    childrenMap: new Map(),\n    node,\n    root,\n    condition,\n    evaluate,\n    isTemplateTag: isTemplate(root),\n    template: template.createDOM(node),\n    getKey,\n    indexName,\n    itemName,\n    placeholder\n  });\n}\n\n/**\n * Binding responsible for the `if` directive\n */\n\nconst IfBinding = {\n  // dynamic binding properties\n  // node: null,\n  // evaluate: null,\n  // isTemplateTag: false,\n  // placeholder: null,\n  // template: null,\n  // API methods\n  mount(scope, parentScope) {\n    return this.update(scope, parentScope);\n  },\n\n  update(scope, parentScope) {\n    const value = !!this.evaluate(scope);\n    const mustMount = !this.value && value;\n    const mustUnmount = this.value && !value;\n\n    const mount = () => {\n      const pristine = this.node.cloneNode();\n      insertBefore(pristine, this.placeholder);\n      this.template = this.template.clone();\n      this.template.mount(pristine, scope, parentScope);\n    };\n\n    switch (true) {\n      case mustMount:\n        mount();\n        break;\n\n      case mustUnmount:\n        this.unmount(scope);\n        break;\n\n      default:\n        if (value) this.template.update(scope, parentScope);\n    }\n\n    this.value = value;\n    return this;\n  },\n\n  unmount(scope, parentScope) {\n    this.template.unmount(scope, parentScope, true);\n    return this;\n  }\n\n};\nfunction create$5(node, _ref) {\n  let {\n    evaluate,\n    template\n  } = _ref;\n  const placeholder = document.createTextNode('');\n  insertBefore(placeholder, node);\n  removeChild(node);\n  return Object.assign({}, IfBinding, {\n    node,\n    evaluate,\n    placeholder,\n    template: template.createDOM(node)\n  });\n}\n\n/**\n * Throw an error with a descriptive message\n * @param   { string } message - error message\n * @returns { undefined } hoppla.. at this point the program should stop working\n */\n\nfunction panic(message) {\n  throw new Error(message);\n}\n/**\n * Returns the memoized (cached) function.\n * // borrowed from https://www.30secondsofcode.org/js/s/memoize\n * @param {Function} fn - function to memoize\n * @returns {Function} memoize function\n */\n\nfunction memoize(fn) {\n  const cache = new Map();\n\n  const cached = val => {\n    return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val);\n  };\n\n  cached.cache = cache;\n  return cached;\n}\n/**\n * Evaluate a list of attribute expressions\n * @param   {Array} attributes - attribute expressions generated by the riot compiler\n * @returns {Object} key value pairs with the result of the computation\n */\n\nfunction evaluateAttributeExpressions(attributes) {\n  return attributes.reduce((acc, attribute) => {\n    const {\n      value,\n      type\n    } = attribute;\n\n    switch (true) {\n      // spread attribute\n      case !attribute.name && type === ATTRIBUTE:\n        return Object.assign({}, acc, value);\n      // value attribute\n\n      case type === VALUE:\n        acc.value = attribute.value;\n        break;\n      // normal attributes\n\n      default:\n        acc[dashToCamelCase(attribute.name)] = attribute.value;\n    }\n\n    return acc;\n  }, {});\n}\n\nconst ElementProto = typeof Element === 'undefined' ? {} : Element.prototype;\nconst isNativeHtmlProperty = memoize(name => ElementProto.hasOwnProperty(name)); // eslint-disable-line\n\n/**\n * Add all the attributes provided\n * @param   {HTMLElement} node - target node\n * @param   {Object} attributes - object containing the attributes names and values\n * @returns {undefined} sorry it's a void function :(\n */\n\nfunction setAllAttributes(node, attributes) {\n  Object.entries(attributes).forEach(_ref => {\n    let [name, value] = _ref;\n    return attributeExpression(node, {\n      name\n    }, value);\n  });\n}\n/**\n * Remove all the attributes provided\n * @param   {HTMLElement} node - target node\n * @param   {Object} newAttributes - object containing all the new attribute names\n * @param   {Object} oldAttributes - object containing all the old attribute names\n * @returns {undefined} sorry it's a void function :(\n */\n\n\nfunction removeAllAttributes(node, newAttributes, oldAttributes) {\n  const newKeys = newAttributes ? Object.keys(newAttributes) : [];\n  Object.keys(oldAttributes).filter(name => !newKeys.includes(name)).forEach(attribute => node.removeAttribute(attribute));\n}\n/**\n * Check whether the attribute value can be rendered\n * @param {*} value - expression value\n * @returns {boolean} true if we can render this attribute value\n */\n\n\nfunction canRenderAttribute(value) {\n  return value === true || ['string', 'number'].includes(typeof value);\n}\n/**\n * Check whether the attribute should be removed\n * @param {*} value - expression value\n * @returns {boolean} boolean - true if the attribute can be removed}\n */\n\n\nfunction shouldRemoveAttribute(value) {\n  return !value && value !== 0;\n}\n/**\n * This methods handles the DOM attributes updates\n * @param   {HTMLElement} node - target node\n * @param   {Object} expression - expression object\n * @param   {string} expression.name - attribute name\n * @param   {*} value - new expression value\n * @param   {*} oldValue - the old expression cached value\n * @returns {undefined}\n */\n\n\nfunction attributeExpression(node, _ref2, value, oldValue) {\n  let {\n    name\n  } = _ref2;\n\n  // is it a spread operator? {...attributes}\n  if (!name) {\n    if (oldValue) {\n      // remove all the old attributes\n      removeAllAttributes(node, value, oldValue);\n    } // is the value still truthy?\n\n\n    if (value) {\n      setAllAttributes(node, value);\n    }\n\n    return;\n  } // handle boolean attributes\n\n\n  if (!isNativeHtmlProperty(name) && (isBoolean(value) || isObject(value) || isFunction(value))) {\n    node[name] = value;\n  }\n\n  if (shouldRemoveAttribute(value)) {\n    node.removeAttribute(name);\n  } else if (canRenderAttribute(value)) {\n    node.setAttribute(name, normalizeValue(name, value));\n  }\n}\n/**\n * Get the value as string\n * @param   {string} name - attribute name\n * @param   {*} value - user input value\n * @returns {string} input value as string\n */\n\nfunction normalizeValue(name, value) {\n  // be sure that expressions like selected={ true } will be always rendered as selected='selected'\n  return value === true ? name : value;\n}\n\nconst RE_EVENTS_PREFIX = /^on/;\n\nconst getCallbackAndOptions = value => Array.isArray(value) ? value : [value, false]; // see also https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38\n\n\nconst EventListener = {\n  handleEvent(event) {\n    this[event.type](event);\n  }\n\n};\nconst ListenersWeakMap = new WeakMap();\n\nconst createListener = node => {\n  const listener = Object.create(EventListener);\n  ListenersWeakMap.set(node, listener);\n  return listener;\n};\n/**\n * Set a new event listener\n * @param   {HTMLElement} node - target node\n * @param   {Object} expression - expression object\n * @param   {string} expression.name - event name\n * @param   {*} value - new expression value\n * @returns {value} the callback just received\n */\n\n\nfunction eventExpression(node, _ref, value) {\n  let {\n    name\n  } = _ref;\n  const normalizedEventName = name.replace(RE_EVENTS_PREFIX, '');\n  const eventListener = ListenersWeakMap.get(node) || createListener(node);\n  const [callback, options] = getCallbackAndOptions(value);\n  const handler = eventListener[normalizedEventName];\n  const mustRemoveEvent = handler && !callback;\n  const mustAddEvent = callback && !handler;\n\n  if (mustRemoveEvent) {\n    node.removeEventListener(normalizedEventName, eventListener);\n  }\n\n  if (mustAddEvent) {\n    node.addEventListener(normalizedEventName, eventListener, options);\n  }\n\n  eventListener[normalizedEventName] = callback;\n}\n\n/**\n * Normalize the user value in order to render a empty string in case of falsy values\n * @param   {*} value - user input value\n * @returns {string} hopefully a string\n */\n\nfunction normalizeStringValue(value) {\n  return isNil(value) ? '' : value;\n}\n\n/**\n * Get the the target text node to update or create one from of a comment node\n * @param   {HTMLElement} node - any html element containing childNodes\n * @param   {number} childNodeIndex - index of the text node in the childNodes list\n * @returns {Text} the text node to update\n */\n\nconst getTextNode = (node, childNodeIndex) => {\n  const target = node.childNodes[childNodeIndex];\n\n  if (target.nodeType === Node.COMMENT_NODE) {\n    const textNode = document.createTextNode('');\n    node.replaceChild(textNode, target);\n    return textNode;\n  }\n\n  return target;\n};\n/**\n * This methods handles a simple text expression update\n * @param   {HTMLElement} node - target node\n * @param   {Object} data - expression object\n * @param   {*} value - new expression value\n * @returns {undefined}\n */\n\nfunction textExpression(node, data, value) {\n  node.data = normalizeStringValue(value);\n}\n\n/**\n * This methods handles the input fileds value updates\n * @param   {HTMLElement} node - target node\n * @param   {Object} expression - expression object\n * @param   {*} value - new expression value\n * @returns {undefined}\n */\n\nfunction valueExpression(node, expression, value) {\n  node.value = normalizeStringValue(value);\n}\n\nvar expressions = {\n  [ATTRIBUTE]: attributeExpression,\n  [EVENT]: eventExpression,\n  [TEXT]: textExpression,\n  [VALUE]: valueExpression\n};\n\nconst Expression = {\n  // Static props\n  // node: null,\n  // value: null,\n  // API methods\n\n  /**\n   * Mount the expression evaluating its initial value\n   * @param   {*} scope - argument passed to the expression to evaluate its current values\n   * @returns {Expression} self\n   */\n  mount(scope) {\n    // hopefully a pure function\n    this.value = this.evaluate(scope); // IO() DOM updates\n\n    apply(this, this.value);\n    return this;\n  },\n\n  /**\n   * Update the expression if its value changed\n   * @param   {*} scope - argument passed to the expression to evaluate its current values\n   * @returns {Expression} self\n   */\n  update(scope) {\n    // pure function\n    const value = this.evaluate(scope);\n\n    if (this.value !== value) {\n      // IO() DOM updates\n      apply(this, value);\n      this.value = value;\n    }\n\n    return this;\n  },\n\n  /**\n   * Expression teardown method\n   * @returns {Expression} self\n   */\n  unmount() {\n    // unmount only the event handling expressions\n    if (this.type === EVENT) apply(this, null);\n    return this;\n  }\n\n};\n/**\n * IO() function to handle the DOM updates\n * @param {Expression} expression - expression object\n * @param {*} value - current expression value\n * @returns {undefined}\n */\n\nfunction apply(expression, value) {\n  return expressions[expression.type](expression.node, expression, value, expression.value);\n}\n\nfunction create$4(node, data) {\n  return Object.assign({}, Expression, data, {\n    node: data.type === TEXT ? getTextNode(node, data.childNodeIndex) : node\n  });\n}\n\n/**\n * Create a flat object having as keys a list of methods that if dispatched will propagate\n * on the whole collection\n * @param   {Array} collection - collection to iterate\n * @param   {Array<string>} methods - methods to execute on each item of the collection\n * @param   {*} context - context returned by the new methods created\n * @returns {Object} a new object to simplify the the nested methods dispatching\n */\nfunction flattenCollectionMethods(collection, methods, context) {\n  return methods.reduce((acc, method) => {\n    return Object.assign({}, acc, {\n      [method]: scope => {\n        return collection.map(item => item[method](scope)) && context;\n      }\n    });\n  }, {});\n}\n\nfunction create$3(node, _ref) {\n  let {\n    expressions\n  } = _ref;\n  return Object.assign({}, flattenCollectionMethods(expressions.map(expression => create$4(node, expression)), ['mount', 'update', 'unmount']));\n}\n\nfunction extendParentScope(attributes, scope, parentScope) {\n  if (!attributes || !attributes.length) return parentScope;\n  const expressions = attributes.map(attr => Object.assign({}, attr, {\n    value: attr.evaluate(scope)\n  }));\n  return Object.assign(Object.create(parentScope || null), evaluateAttributeExpressions(expressions));\n} // this function is only meant to fix an edge case\n// https://github.com/riot/riot/issues/2842\n\n\nconst getRealParent = (scope, parentScope) => scope[PARENT_KEY_SYMBOL] || parentScope;\n\nconst SlotBinding = {\n  // dynamic binding properties\n  // node: null,\n  // name: null,\n  attributes: [],\n\n  // template: null,\n  getTemplateScope(scope, parentScope) {\n    return extendParentScope(this.attributes, scope, parentScope);\n  },\n\n  // API methods\n  mount(scope, parentScope) {\n    const templateData = scope.slots ? scope.slots.find(_ref => {\n      let {\n        id\n      } = _ref;\n      return id === this.name;\n    }) : false;\n    const {\n      parentNode\n    } = this.node;\n    const realParent = getRealParent(scope, parentScope);\n    this.template = templateData && create(templateData.html, templateData.bindings).createDOM(parentNode);\n\n    if (this.template) {\n      cleanNode(this.node);\n      this.template.mount(this.node, this.getTemplateScope(scope, realParent), realParent);\n      this.template.children = Array.from(this.node.childNodes);\n    }\n\n    moveSlotInnerContent(this.node);\n    removeChild(this.node);\n    return this;\n  },\n\n  update(scope, parentScope) {\n    if (this.template) {\n      const realParent = getRealParent(scope, parentScope);\n      this.template.update(this.getTemplateScope(scope, realParent), realParent);\n    }\n\n    return this;\n  },\n\n  unmount(scope, parentScope, mustRemoveRoot) {\n    if (this.template) {\n      this.template.unmount(this.getTemplateScope(scope, parentScope), null, mustRemoveRoot);\n    }\n\n    return this;\n  }\n\n};\n/**\n * Move the inner content of the slots outside of them\n * @param   {HTMLElement} slot - slot node\n * @returns {undefined} it's a void method ¯\\_(ツ)_/¯\n */\n\nfunction moveSlotInnerContent(slot) {\n  const child = slot && slot.firstChild;\n  if (!child) return;\n  insertBefore(child, slot);\n  moveSlotInnerContent(slot);\n}\n/**\n * Create a single slot binding\n * @param   {HTMLElement} node - slot node\n * @param   {string} name - slot id\n * @param   {AttributeExpressionData[]} attributes - slot attributes\n * @returns {Object} Slot binding object\n */\n\n\nfunction createSlot(node, _ref2) {\n  let {\n    name,\n    attributes\n  } = _ref2;\n  return Object.assign({}, SlotBinding, {\n    attributes,\n    node,\n    name\n  });\n}\n\n/**\n * Create a new tag object if it was registered before, otherwise fallback to the simple\n * template chunk\n * @param   {Function} component - component factory function\n * @param   {Array<Object>} slots - array containing the slots markup\n * @param   {Array} attributes - dynamic attributes that will be received by the tag element\n * @returns {TagImplementation|TemplateChunk} a tag implementation or a template chunk as fallback\n */\n\nfunction getTag(component, slots, attributes) {\n  if (slots === void 0) {\n    slots = [];\n  }\n\n  if (attributes === void 0) {\n    attributes = [];\n  }\n\n  // if this tag was registered before we will return its implementation\n  if (component) {\n    return component({\n      slots,\n      attributes\n    });\n  } // otherwise we return a template chunk\n\n\n  return create(slotsToMarkup(slots), [...slotBindings(slots), {\n    // the attributes should be registered as binding\n    // if we fallback to a normal template chunk\n    expressions: attributes.map(attr => {\n      return Object.assign({\n        type: ATTRIBUTE\n      }, attr);\n    })\n  }]);\n}\n/**\n * Merge all the slots bindings into a single array\n * @param   {Array<Object>} slots - slots collection\n * @returns {Array<Bindings>} flatten bindings array\n */\n\n\nfunction slotBindings(slots) {\n  return slots.reduce((acc, _ref) => {\n    let {\n      bindings\n    } = _ref;\n    return acc.concat(bindings);\n  }, []);\n}\n/**\n * Merge all the slots together in a single markup string\n * @param   {Array<Object>} slots - slots collection\n * @returns {string} markup of all the slots in a single string\n */\n\n\nfunction slotsToMarkup(slots) {\n  return slots.reduce((acc, slot) => {\n    return acc + slot.html;\n  }, '');\n}\n\nconst TagBinding = {\n  // dynamic binding properties\n  // node: null,\n  // evaluate: null,\n  // name: null,\n  // slots: null,\n  // tag: null,\n  // attributes: null,\n  // getComponent: null,\n  mount(scope) {\n    return this.update(scope);\n  },\n\n  update(scope, parentScope) {\n    const name = this.evaluate(scope); // simple update\n\n    if (name && name === this.name) {\n      this.tag.update(scope);\n    } else {\n      // unmount the old tag if it exists\n      this.unmount(scope, parentScope, true); // mount the new tag\n\n      this.name = name;\n      this.tag = getTag(this.getComponent(name), this.slots, this.attributes);\n      this.tag.mount(this.node, scope);\n    }\n\n    return this;\n  },\n\n  unmount(scope, parentScope, keepRootTag) {\n    if (this.tag) {\n      // keep the root tag\n      this.tag.unmount(keepRootTag);\n    }\n\n    return this;\n  }\n\n};\nfunction create$2(node, _ref2) {\n  let {\n    evaluate,\n    getComponent,\n    slots,\n    attributes\n  } = _ref2;\n  return Object.assign({}, TagBinding, {\n    node,\n    evaluate,\n    slots,\n    attributes,\n    getComponent\n  });\n}\n\nvar bindings = {\n  [IF]: create$5,\n  [SIMPLE]: create$3,\n  [EACH]: create$6,\n  [TAG]: create$2,\n  [SLOT]: createSlot\n};\n\n/**\n * Text expressions in a template tag will get childNodeIndex value normalized\n * depending on the position of the <template> tag offset\n * @param   {Expression[]} expressions - riot expressions array\n * @param   {number} textExpressionsOffset - offset of the <template> tag\n * @returns {Expression[]} expressions containing the text expressions normalized\n */\n\nfunction fixTextExpressionsOffset(expressions, textExpressionsOffset) {\n  return expressions.map(e => e.type === TEXT ? Object.assign({}, e, {\n    childNodeIndex: e.childNodeIndex + textExpressionsOffset\n  }) : e);\n}\n/**\n * Bind a new expression object to a DOM node\n * @param   {HTMLElement} root - DOM node where to bind the expression\n * @param   {TagBindingData} binding - binding data\n * @param   {number|null} templateTagOffset - if it's defined we need to fix the text expressions childNodeIndex offset\n * @returns {Binding} Binding object\n */\n\n\nfunction create$1(root, binding, templateTagOffset) {\n  const {\n    selector,\n    type,\n    redundantAttribute,\n    expressions\n  } = binding; // find the node to apply the bindings\n\n  const node = selector ? root.querySelector(selector) : root; // remove eventually additional attributes created only to select this node\n\n  if (redundantAttribute) node.removeAttribute(redundantAttribute);\n  const bindingExpressions = expressions || []; // init the binding\n\n  return (bindings[type] || bindings[SIMPLE])(node, Object.assign({}, binding, {\n    expressions: templateTagOffset && !selector ? fixTextExpressionsOffset(bindingExpressions, templateTagOffset) : bindingExpressions\n  }));\n}\n\nfunction createHTMLTree(html, root) {\n  const template = isTemplate(root) ? root : document.createElement('template');\n  template.innerHTML = html;\n  return template.content;\n} // for svg nodes we need a bit more work\n\n\nfunction createSVGTree(html, container) {\n  // create the SVGNode\n  const svgNode = container.ownerDocument.importNode(new window.DOMParser().parseFromString(`<svg xmlns=\"http://www.w3.org/2000/svg\">${html}</svg>`, 'application/xml').documentElement, true);\n  return svgNode;\n}\n/**\n * Create the DOM that will be injected\n * @param {Object} root - DOM node to find out the context where the fragment will be created\n * @param   {string} html - DOM to create as string\n * @returns {HTMLDocumentFragment|HTMLElement} a new html fragment\n */\n\n\nfunction createDOMTree(root, html) {\n  if (isSvg(root)) return createSVGTree(html, root);\n  return createHTMLTree(html, root);\n}\n\n/**\n * Inject the DOM tree into a target node\n * @param   {HTMLElement} el - target element\n * @param   {DocumentFragment|SVGElement} dom - dom tree to inject\n * @returns {undefined}\n */\n\nfunction injectDOM(el, dom) {\n  switch (true) {\n    case isSvg(el):\n      moveChildren(dom, el);\n      break;\n\n    case isTemplate(el):\n      el.parentNode.replaceChild(dom, el);\n      break;\n\n    default:\n      el.appendChild(dom);\n  }\n}\n\n/**\n * Create the Template DOM skeleton\n * @param   {HTMLElement} el - root node where the DOM will be injected\n * @param   {string|HTMLElement} html - HTML markup or HTMLElement that will be injected into the root node\n * @returns {?DocumentFragment} fragment that will be injected into the root node\n */\n\nfunction createTemplateDOM(el, html) {\n  return html && (typeof html === 'string' ? createDOMTree(el, html) : html);\n}\n/**\n * Get the offset of the <template> tag\n * @param {HTMLElement} parentNode - template tag parent node\n * @param {HTMLElement} el - the template tag we want to render\n * @param   {Object} meta - meta properties needed to handle the <template> tags in loops\n * @returns {number} offset of the <template> tag calculated from its siblings DOM nodes\n */\n\n\nfunction getTemplateTagOffset(parentNode, el, meta) {\n  const siblings = Array.from(parentNode.childNodes);\n  return Math.max(siblings.indexOf(el), siblings.indexOf(meta.head) + 1, 0);\n}\n/**\n * Template Chunk model\n * @type {Object}\n */\n\n\nconst TemplateChunk = Object.freeze({\n  // Static props\n  // bindings: null,\n  // bindingsData: null,\n  // html: null,\n  // isTemplateTag: false,\n  // fragment: null,\n  // children: null,\n  // dom: null,\n  // el: null,\n\n  /**\n   * Create the template DOM structure that will be cloned on each mount\n   * @param   {HTMLElement} el - the root node\n   * @returns {TemplateChunk} self\n   */\n  createDOM(el) {\n    // make sure that the DOM gets created before cloning the template\n    this.dom = this.dom || createTemplateDOM(el, this.html) || document.createDocumentFragment();\n    return this;\n  },\n\n  // API methods\n\n  /**\n   * Attach the template to a DOM node\n   * @param   {HTMLElement} el - target DOM node\n   * @param   {*} scope - template data\n   * @param   {*} parentScope - scope of the parent template tag\n   * @param   {Object} meta - meta properties needed to handle the <template> tags in loops\n   * @returns {TemplateChunk} self\n   */\n  mount(el, scope, parentScope, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    if (!el) throw new Error('Please provide DOM node to mount properly your template');\n    if (this.el) this.unmount(scope); // <template> tags require a bit more work\n    // the template fragment might be already created via meta outside of this call\n\n    const {\n      fragment,\n      children,\n      avoidDOMInjection\n    } = meta; // <template> bindings of course can not have a root element\n    // so we check the parent node to set the query selector bindings\n\n    const {\n      parentNode\n    } = children ? children[0] : el;\n    const isTemplateTag = isTemplate(el);\n    const templateTagOffset = isTemplateTag ? getTemplateTagOffset(parentNode, el, meta) : null; // create the DOM if it wasn't created before\n\n    this.createDOM(el); // create the DOM of this template cloning the original DOM structure stored in this instance\n    // notice that if a documentFragment was passed (via meta) we will use it instead\n\n    const cloneNode = fragment || this.dom.cloneNode(true); // store root node\n    // notice that for template tags the root note will be the parent tag\n\n    this.el = isTemplateTag ? parentNode : el; // create the children array only for the <template> fragments\n\n    this.children = isTemplateTag ? children || Array.from(cloneNode.childNodes) : null; // inject the DOM into the el only if a fragment is available\n\n    if (!avoidDOMInjection && cloneNode) injectDOM(el, cloneNode); // create the bindings\n\n    this.bindings = this.bindingsData.map(binding => create$1(this.el, binding, templateTagOffset));\n    this.bindings.forEach(b => b.mount(scope, parentScope)); // store the template meta properties\n\n    this.meta = meta;\n    return this;\n  },\n\n  /**\n   * Update the template with fresh data\n   * @param   {*} scope - template data\n   * @param   {*} parentScope - scope of the parent template tag\n   * @returns {TemplateChunk} self\n   */\n  update(scope, parentScope) {\n    this.bindings.forEach(b => b.update(scope, parentScope));\n    return this;\n  },\n\n  /**\n   * Remove the template from the node where it was initially mounted\n   * @param   {*} scope - template data\n   * @param   {*} parentScope - scope of the parent template tag\n   * @param   {boolean|null} mustRemoveRoot - if true remove the root element,\n   * if false or undefined clean the root tag content, if null don't touch the DOM\n   * @returns {TemplateChunk} self\n   */\n  unmount(scope, parentScope, mustRemoveRoot) {\n    if (mustRemoveRoot === void 0) {\n      mustRemoveRoot = false;\n    }\n\n    const el = this.el;\n\n    if (!el) {\n      return this;\n    }\n\n    this.bindings.forEach(b => b.unmount(scope, parentScope, mustRemoveRoot));\n\n    switch (true) {\n      // pure components should handle the DOM unmount updates by themselves\n      // for mustRemoveRoot === null don't touch the DOM\n      case el[IS_PURE_SYMBOL] || mustRemoveRoot === null:\n        break;\n      // if children are declared, clear them\n      // applicable for <template> and <slot/> bindings\n\n      case Array.isArray(this.children):\n        clearChildren(this.children);\n        break;\n      // clean the node children only\n\n      case !mustRemoveRoot:\n        cleanNode(el);\n        break;\n      // remove the root node only if the mustRemoveRoot is truly\n\n      case !!mustRemoveRoot:\n        removeChild(el);\n        break;\n    }\n\n    this.el = null;\n    return this;\n  },\n\n  /**\n   * Clone the template chunk\n   * @returns {TemplateChunk} a clone of this object resetting the this.el property\n   */\n  clone() {\n    return Object.assign({}, this, {\n      meta: {},\n      el: null\n    });\n  }\n\n});\n/**\n * Create a template chunk wiring also the bindings\n * @param   {string|HTMLElement} html - template string\n * @param   {BindingData[]} bindings - bindings collection\n * @returns {TemplateChunk} a new TemplateChunk copy\n */\n\nfunction create(html, bindings) {\n  if (bindings === void 0) {\n    bindings = [];\n  }\n\n  return Object.assign({}, TemplateChunk, {\n    html,\n    bindingsData: bindings\n  });\n}\n\n/**\n * Method used to bind expressions to a DOM node\n * @param   {string|HTMLElement} html - your static template html structure\n * @param   {Array} bindings - list of the expressions to bind to update the markup\n * @returns {TemplateChunk} a new TemplateChunk object having the `update`,`mount`, `unmount` and `clone` methods\n *\n * @example\n *\n * riotDOMBindings\n *  .template(\n *   `<div expr0><!----></div><div><p expr1><!----><section expr2></section></p>`,\n *   [\n *     {\n *       selector: '[expr0]',\n *       redundantAttribute: 'expr0',\n *       expressions: [\n *         {\n *           type: expressionTypes.TEXT,\n *           childNodeIndex: 0,\n *           evaluate(scope) {\n *             return scope.time;\n *           },\n *         },\n *       ],\n *     },\n *     {\n *       selector: '[expr1]',\n *       redundantAttribute: 'expr1',\n *       expressions: [\n *         {\n *           type: expressionTypes.TEXT,\n *           childNodeIndex: 0,\n *           evaluate(scope) {\n *             return scope.name;\n *           },\n *         },\n *         {\n *           type: 'attribute',\n *           name: 'style',\n *           evaluate(scope) {\n *             return scope.style;\n *           },\n *         },\n *       ],\n *     },\n *     {\n *       selector: '[expr2]',\n *       redundantAttribute: 'expr2',\n *       type: bindingTypes.IF,\n *       evaluate(scope) {\n *         return scope.isVisible;\n *       },\n *       template: riotDOMBindings.template('hello there'),\n *     },\n *   ]\n * )\n */\n\nvar DOMBindings = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  template: create,\n  createBinding: create$1,\n  createExpression: create$4,\n  bindingTypes: bindingTypes,\n  expressionTypes: expressionTypes\n});\n\nfunction noop() {\n  return this;\n}\n/**\n * Autobind the methods of a source object to itself\n * @param   {Object} source - probably a riot tag instance\n * @param   {Array<string>} methods - list of the methods to autobind\n * @returns {Object} the original object received\n */\n\nfunction autobindMethods(source, methods) {\n  methods.forEach(method => {\n    source[method] = source[method].bind(source);\n  });\n  return source;\n}\n/**\n * Call the first argument received only if it's a function otherwise return it as it is\n * @param   {*} source - anything\n * @returns {*} anything\n */\n\nfunction callOrAssign(source) {\n  return isFunction(source) ? source.prototype && source.prototype.constructor ? new source() : source() : source;\n}\n\n/**\n * Converts any DOM node/s to a loopable array\n * @param   { HTMLElement|NodeList } els - single html element or a node list\n * @returns { Array } always a loopable object\n */\nfunction domToArray(els) {\n  // can this object be already looped?\n  if (!Array.isArray(els)) {\n    // is it a node list?\n    if (/^\\[object (HTMLCollection|NodeList|Object)\\]$/.test(Object.prototype.toString.call(els)) && typeof els.length === 'number') return Array.from(els);else // if it's a single node\n      // it will be returned as \"array\" with one single entry\n      return [els];\n  } // this object could be looped out of the box\n\n\n  return els;\n}\n\n/**\n * Simple helper to find DOM nodes returning them as array like loopable object\n * @param   { string|DOMNodeList } selector - either the query or the DOM nodes to arraify\n * @param   { HTMLElement }        ctx      - context defining where the query will search for the DOM nodes\n * @returns { Array } DOM nodes found as array\n */\n\nfunction $(selector, ctx) {\n  return domToArray(typeof selector === 'string' ? (ctx || document).querySelectorAll(selector) : selector);\n}\n\n/**\n * Normalize the return values, in case of a single value we avoid to return an array\n * @param   { Array } values - list of values we want to return\n * @returns { Array|string|boolean } either the whole list of values or the single one found\n * @private\n */\n\nconst normalize = values => values.length === 1 ? values[0] : values;\n/**\n * Parse all the nodes received to get/remove/check their attributes\n * @param   { HTMLElement|NodeList|Array } els    - DOM node/s to parse\n * @param   { string|Array }               name   - name or list of attributes\n * @param   { string }                     method - method that will be used to parse the attributes\n * @returns { Array|string } result of the parsing in a list or a single value\n * @private\n */\n\n\nfunction parseNodes(els, name, method) {\n  const names = typeof name === 'string' ? [name] : name;\n  return normalize(domToArray(els).map(el => {\n    return normalize(names.map(n => el[method](n)));\n  }));\n}\n/**\n * Set any attribute on a single or a list of DOM nodes\n * @param   { HTMLElement|NodeList|Array } els   - DOM node/s to parse\n * @param   { string|Object }              name  - either the name of the attribute to set\n *                                                 or a list of properties as object key - value\n * @param   { string }                     value - the new value of the attribute (optional)\n * @returns { HTMLElement|NodeList|Array } the original array of elements passed to this function\n *\n * @example\n *\n * import { set } from 'bianco.attr'\n *\n * const img = document.createElement('img')\n *\n * set(img, 'width', 100)\n *\n * // or also\n * set(img, {\n *   width: 300,\n *   height: 300\n * })\n *\n */\n\n\nfunction set(els, name, value) {\n  const attrs = typeof name === 'object' ? name : {\n    [name]: value\n  };\n  const props = Object.keys(attrs);\n  domToArray(els).forEach(el => {\n    props.forEach(prop => el.setAttribute(prop, attrs[prop]));\n  });\n  return els;\n}\n/**\n * Get any attribute from a single or a list of DOM nodes\n * @param   { HTMLElement|NodeList|Array } els   - DOM node/s to parse\n * @param   { string|Array }               name  - name or list of attributes to get\n * @returns { Array|string } list of the attributes found\n *\n * @example\n *\n * import { get } from 'bianco.attr'\n *\n * const img = document.createElement('img')\n *\n * get(img, 'width') // => '200'\n *\n * // or also\n * get(img, ['width', 'height']) // => ['200', '300']\n *\n * // or also\n * get([img1, img2], ['width', 'height']) // => [['200', '300'], ['500', '200']]\n */\n\nfunction get(els, name) {\n  return parseNodes(els, name, 'getAttribute');\n}\n\nconst CSS_BY_NAME = new Map();\nconst STYLE_NODE_SELECTOR = 'style[riot]'; // memoized curried function\n\nconst getStyleNode = (style => {\n  return () => {\n    // lazy evaluation:\n    // if this function was already called before\n    // we return its cached result\n    if (style) return style; // create a new style element or use an existing one\n    // and cache it internally\n\n    style = $(STYLE_NODE_SELECTOR)[0] || document.createElement('style');\n    set(style, 'type', 'text/css');\n    /* istanbul ignore next */\n\n    if (!style.parentNode) document.head.appendChild(style);\n    return style;\n  };\n})();\n/**\n * Object that will be used to inject and manage the css of every tag instance\n */\n\n\nvar cssManager = {\n  CSS_BY_NAME,\n\n  /**\n   * Save a tag style to be later injected into DOM\n   * @param { string } name - if it's passed we will map the css to a tagname\n   * @param { string } css - css string\n   * @returns {Object} self\n   */\n  add(name, css) {\n    if (!CSS_BY_NAME.has(name)) {\n      CSS_BY_NAME.set(name, css);\n      this.inject();\n    }\n\n    return this;\n  },\n\n  /**\n   * Inject all previously saved tag styles into DOM\n   * innerHTML seems slow: http://jsperf.com/riot-insert-style\n   * @returns {Object} self\n   */\n  inject() {\n    getStyleNode().innerHTML = [...CSS_BY_NAME.values()].join('\\n');\n    return this;\n  },\n\n  /**\n   * Remove a tag style from the DOM\n   * @param {string} name a registered tagname\n   * @returns {Object} self\n   */\n  remove(name) {\n    if (CSS_BY_NAME.has(name)) {\n      CSS_BY_NAME.delete(name);\n      this.inject();\n    }\n\n    return this;\n  }\n\n};\n\n/**\n * Function to curry any javascript method\n * @param   {Function}  fn - the target function we want to curry\n * @param   {...[args]} acc - initial arguments\n * @returns {Function|*} it will return a function until the target function\n *                       will receive all of its arguments\n */\nfunction curry(fn) {\n  for (var _len = arguments.length, acc = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    acc[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    args = [...acc, ...args];\n    return args.length < fn.length ? curry(fn, ...args) : fn(...args);\n  };\n}\n\n/**\n * Get the tag name of any DOM node\n * @param   {HTMLElement} element - DOM node we want to inspect\n * @returns {string} name to identify this dom node in riot\n */\n\nfunction getName(element) {\n  return get(element, IS_DIRECTIVE) || element.tagName.toLowerCase();\n}\n\nconst COMPONENT_CORE_HELPERS = Object.freeze({\n  // component helpers\n  $(selector) {\n    return $(selector, this.root)[0];\n  },\n\n  $$(selector) {\n    return $(selector, this.root);\n  }\n\n});\nconst PURE_COMPONENT_API = Object.freeze({\n  [MOUNT_METHOD_KEY]: noop,\n  [UPDATE_METHOD_KEY]: noop,\n  [UNMOUNT_METHOD_KEY]: noop\n});\nconst COMPONENT_LIFECYCLE_METHODS = Object.freeze({\n  [SHOULD_UPDATE_KEY]: noop,\n  [ON_BEFORE_MOUNT_KEY]: noop,\n  [ON_MOUNTED_KEY]: noop,\n  [ON_BEFORE_UPDATE_KEY]: noop,\n  [ON_UPDATED_KEY]: noop,\n  [ON_BEFORE_UNMOUNT_KEY]: noop,\n  [ON_UNMOUNTED_KEY]: noop\n});\nconst MOCKED_TEMPLATE_INTERFACE = Object.assign({}, PURE_COMPONENT_API, {\n  clone: noop,\n  createDOM: noop\n});\n/**\n * Performance optimization for the recursive components\n * @param  {RiotComponentWrapper} componentWrapper - riot compiler generated object\n * @returns {Object} component like interface\n */\n\nconst memoizedCreateComponent = memoize(createComponent);\n/**\n * Evaluate the component properties either from its real attributes or from its initial user properties\n * @param   {HTMLElement} element - component root\n * @param   {Object}  initialProps - initial props\n * @returns {Object} component props key value pairs\n */\n\nfunction evaluateInitialProps(element, initialProps) {\n  if (initialProps === void 0) {\n    initialProps = {};\n  }\n\n  return Object.assign({}, DOMattributesToObject(element), callOrAssign(initialProps));\n}\n/**\n * Bind a DOM node to its component object\n * @param   {HTMLElement} node - html node mounted\n * @param   {Object} component - Riot.js component object\n * @returns {Object} the component object received as second argument\n */\n\n\nconst bindDOMNodeToComponentObject = (node, component) => node[DOM_COMPONENT_INSTANCE_PROPERTY$1] = component;\n/**\n * Wrap the Riot.js core API methods using a mapping function\n * @param   {Function} mapFunction - lifting function\n * @returns {Object} an object having the { mount, update, unmount } functions\n */\n\n\nfunction createCoreAPIMethods(mapFunction) {\n  return [MOUNT_METHOD_KEY, UPDATE_METHOD_KEY, UNMOUNT_METHOD_KEY].reduce((acc, method) => {\n    acc[method] = mapFunction(method);\n    return acc;\n  }, {});\n}\n/**\n * Factory function to create the component templates only once\n * @param   {Function} template - component template creation function\n * @param   {RiotComponentWrapper} componentWrapper - riot compiler generated object\n * @returns {TemplateChunk} template chunk object\n */\n\n\nfunction componentTemplateFactory(template, componentWrapper) {\n  const components = createSubcomponents(componentWrapper.exports ? componentWrapper.exports.components : {});\n  return template(create, expressionTypes, bindingTypes, name => {\n    // improve support for recursive components\n    if (name === componentWrapper.name) return memoizedCreateComponent(componentWrapper); // return the registered components\n\n    return components[name] || COMPONENTS_IMPLEMENTATION_MAP$1.get(name);\n  });\n}\n/**\n * Create a pure component\n * @param   {Function} pureFactoryFunction - pure component factory function\n * @param   {Array} options.slots - component slots\n * @param   {Array} options.attributes - component attributes\n * @param   {Array} options.template - template factory function\n * @param   {Array} options.template - template factory function\n * @param   {any} options.props - initial component properties\n * @returns {Object} pure component object\n */\n\n\nfunction createPureComponent(pureFactoryFunction, _ref) {\n  let {\n    slots,\n    attributes,\n    props,\n    css,\n    template\n  } = _ref;\n  if (template) panic('Pure components can not have html');\n  if (css) panic('Pure components do not have css');\n  const component = defineDefaults(pureFactoryFunction({\n    slots,\n    attributes,\n    props\n  }), PURE_COMPONENT_API);\n  return createCoreAPIMethods(method => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    // intercept the mount calls to bind the DOM node to the pure object created\n    // see also https://github.com/riot/riot/issues/2806\n    if (method === MOUNT_METHOD_KEY) {\n      const [element] = args; // mark this node as pure element\n\n      defineProperty(element, IS_PURE_SYMBOL, true);\n      bindDOMNodeToComponentObject(element, component);\n    }\n\n    component[method](...args);\n    return component;\n  });\n}\n/**\n * Create the component interface needed for the @riotjs/dom-bindings tag bindings\n * @param   {RiotComponentWrapper} componentWrapper - riot compiler generated object\n * @param   {string} componentWrapper.css - component css\n * @param   {Function} componentWrapper.template - function that will return the dom-bindings template function\n * @param   {Object} componentWrapper.exports - component interface\n * @param   {string} componentWrapper.name - component name\n * @returns {Object} component like interface\n */\n\n\nfunction createComponent(componentWrapper) {\n  const {\n    css,\n    template,\n    exports,\n    name\n  } = componentWrapper;\n  const templateFn = template ? componentTemplateFactory(template, componentWrapper) : MOCKED_TEMPLATE_INTERFACE;\n  return _ref2 => {\n    let {\n      slots,\n      attributes,\n      props\n    } = _ref2;\n    // pure components rendering will be managed by the end user\n    if (exports && exports[IS_PURE_SYMBOL]) return createPureComponent(exports, {\n      slots,\n      attributes,\n      props,\n      css,\n      template\n    });\n    const componentAPI = callOrAssign(exports) || {};\n    const component = defineComponent({\n      css,\n      template: templateFn,\n      componentAPI,\n      name\n    })({\n      slots,\n      attributes,\n      props\n    }); // notice that for the components create via tag binding\n    // we need to invert the mount (state/parentScope) arguments\n    // the template bindings will only forward the parentScope updates\n    // and never deal with the component state\n\n    return {\n      mount(element, parentScope, state) {\n        return component.mount(element, state, parentScope);\n      },\n\n      update(parentScope, state) {\n        return component.update(state, parentScope);\n      },\n\n      unmount(preserveRoot) {\n        return component.unmount(preserveRoot);\n      }\n\n    };\n  };\n}\n/**\n * Component definition function\n * @param   {Object} implementation - the componen implementation will be generated via compiler\n * @param   {Object} component - the component initial properties\n * @returns {Object} a new component implementation object\n */\n\nfunction defineComponent(_ref3) {\n  let {\n    css,\n    template,\n    componentAPI,\n    name\n  } = _ref3;\n  // add the component css into the DOM\n  if (css && name) cssManager.add(name, css);\n  return curry(enhanceComponentAPI)(defineProperties( // set the component defaults without overriding the original component API\n  defineDefaults(componentAPI, Object.assign({}, COMPONENT_LIFECYCLE_METHODS, {\n    [PROPS_KEY]: {},\n    [STATE_KEY]: {}\n  })), Object.assign({\n    // defined during the component creation\n    [SLOTS_KEY]: null,\n    [ROOT_KEY]: null\n  }, COMPONENT_CORE_HELPERS, {\n    name,\n    css,\n    template\n  })));\n}\n/**\n * Create the bindings to update the component attributes\n * @param   {HTMLElement} node - node where we will bind the expressions\n * @param   {Array} attributes - list of attribute bindings\n * @returns {TemplateChunk} - template bindings object\n */\n\nfunction createAttributeBindings(node, attributes) {\n  if (attributes === void 0) {\n    attributes = [];\n  }\n\n  const expressions = attributes.map(a => create$4(node, a));\n  const binding = {};\n  return Object.assign(binding, Object.assign({\n    expressions\n  }, createCoreAPIMethods(method => scope => {\n    expressions.forEach(e => e[method](scope));\n    return binding;\n  })));\n}\n/**\n * Create the subcomponents that can be included inside a tag in runtime\n * @param   {Object} components - components imported in runtime\n * @returns {Object} all the components transformed into Riot.Component factory functions\n */\n\n\nfunction createSubcomponents(components) {\n  if (components === void 0) {\n    components = {};\n  }\n\n  return Object.entries(callOrAssign(components)).reduce((acc, _ref4) => {\n    let [key, value] = _ref4;\n    acc[camelToDashCase(key)] = createComponent(value);\n    return acc;\n  }, {});\n}\n/**\n * Run the component instance through all the plugins set by the user\n * @param   {Object} component - component instance\n * @returns {Object} the component enhanced by the plugins\n */\n\n\nfunction runPlugins(component) {\n  return [...PLUGINS_SET$1].reduce((c, fn) => fn(c) || c, component);\n}\n/**\n * Compute the component current state merging it with its previous state\n * @param   {Object} oldState - previous state object\n * @param   {Object} newState - new state givent to the `update` call\n * @returns {Object} new object state\n */\n\n\nfunction computeState(oldState, newState) {\n  return Object.assign({}, oldState, callOrAssign(newState));\n}\n/**\n * Add eventually the \"is\" attribute to link this DOM node to its css\n * @param {HTMLElement} element - target root node\n * @param {string} name - name of the component mounted\n * @returns {undefined} it's a void function\n */\n\n\nfunction addCssHook(element, name) {\n  if (getName(element) !== name) {\n    set(element, IS_DIRECTIVE, name);\n  }\n}\n/**\n * Component creation factory function that will enhance the user provided API\n * @param   {Object} component - a component implementation previously defined\n * @param   {Array} options.slots - component slots generated via riot compiler\n * @param   {Array} options.attributes - attribute expressions generated via riot compiler\n * @returns {Riot.Component} a riot component instance\n */\n\n\nfunction enhanceComponentAPI(component, _ref5) {\n  let {\n    slots,\n    attributes,\n    props\n  } = _ref5;\n  return autobindMethods(runPlugins(defineProperties(isObject(component) ? Object.create(component) : component, {\n    mount(element, state, parentScope) {\n      if (state === void 0) {\n        state = {};\n      }\n\n      // any element mounted passing through this function can't be a pure component\n      defineProperty(element, IS_PURE_SYMBOL, false);\n      this[PARENT_KEY_SYMBOL] = parentScope;\n      this[ATTRIBUTES_KEY_SYMBOL] = createAttributeBindings(element, attributes).mount(parentScope);\n      defineProperty(this, PROPS_KEY, Object.freeze(Object.assign({}, evaluateInitialProps(element, props), evaluateAttributeExpressions(this[ATTRIBUTES_KEY_SYMBOL].expressions))));\n      this[STATE_KEY] = computeState(this[STATE_KEY], state);\n      this[TEMPLATE_KEY_SYMBOL] = this.template.createDOM(element).clone(); // link this object to the DOM node\n\n      bindDOMNodeToComponentObject(element, this); // add eventually the 'is' attribute\n\n      component.name && addCssHook(element, component.name); // define the root element\n\n      defineProperty(this, ROOT_KEY, element); // define the slots array\n\n      defineProperty(this, SLOTS_KEY, slots); // before mount lifecycle event\n\n      this[ON_BEFORE_MOUNT_KEY](this[PROPS_KEY], this[STATE_KEY]); // mount the template\n\n      this[TEMPLATE_KEY_SYMBOL].mount(element, this, parentScope);\n      this[ON_MOUNTED_KEY](this[PROPS_KEY], this[STATE_KEY]);\n      return this;\n    },\n\n    update(state, parentScope) {\n      if (state === void 0) {\n        state = {};\n      }\n\n      if (parentScope) {\n        this[PARENT_KEY_SYMBOL] = parentScope;\n        this[ATTRIBUTES_KEY_SYMBOL].update(parentScope);\n      }\n\n      const newProps = evaluateAttributeExpressions(this[ATTRIBUTES_KEY_SYMBOL].expressions);\n      if (this[SHOULD_UPDATE_KEY](newProps, this[PROPS_KEY]) === false) return;\n      defineProperty(this, PROPS_KEY, Object.freeze(Object.assign({}, this[PROPS_KEY], newProps)));\n      this[STATE_KEY] = computeState(this[STATE_KEY], state);\n      this[ON_BEFORE_UPDATE_KEY](this[PROPS_KEY], this[STATE_KEY]); // avoiding recursive updates\n      // see also https://github.com/riot/riot/issues/2895\n\n      if (!this[IS_COMPONENT_UPDATING]) {\n        this[IS_COMPONENT_UPDATING] = true;\n        this[TEMPLATE_KEY_SYMBOL].update(this, this[PARENT_KEY_SYMBOL]);\n      }\n\n      this[ON_UPDATED_KEY](this[PROPS_KEY], this[STATE_KEY]);\n      this[IS_COMPONENT_UPDATING] = false;\n      return this;\n    },\n\n    unmount(preserveRoot) {\n      this[ON_BEFORE_UNMOUNT_KEY](this[PROPS_KEY], this[STATE_KEY]);\n      this[ATTRIBUTES_KEY_SYMBOL].unmount(); // if the preserveRoot is null the template html will be left untouched\n      // in that case the DOM cleanup will happen differently from a parent node\n\n      this[TEMPLATE_KEY_SYMBOL].unmount(this, this[PARENT_KEY_SYMBOL], preserveRoot === null ? null : !preserveRoot);\n      this[ON_UNMOUNTED_KEY](this[PROPS_KEY], this[STATE_KEY]);\n      return this;\n    }\n\n  })), Object.keys(component).filter(prop => isFunction(component[prop])));\n}\n/**\n * Component initialization function starting from a DOM node\n * @param   {HTMLElement} element - element to upgrade\n * @param   {Object} initialProps - initial component properties\n * @param   {string} componentName - component id\n * @returns {Object} a new component instance bound to a DOM node\n */\n\nfunction mountComponent(element, initialProps, componentName) {\n  const name = componentName || getName(element);\n  if (!COMPONENTS_IMPLEMENTATION_MAP$1.has(name)) panic(`The component named \"${name}\" was never registered`);\n  const component = COMPONENTS_IMPLEMENTATION_MAP$1.get(name)({\n    props: initialProps\n  });\n  return component.mount(element);\n}\n\n/**\n * Similar to compose but performs from left-to-right function composition.<br/>\n * {@link https://30secondsofcode.org/function#composeright see also}\n * @param   {...[function]} fns) - list of unary function\n * @returns {*} result of the computation\n */\n/**\n * Performs right-to-left function composition.<br/>\n * Use Array.prototype.reduce() to perform right-to-left function composition.<br/>\n * The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.<br/>\n * {@link https://30secondsofcode.org/function#compose original source code}\n * @param   {...[function]} fns) - list of unary function\n * @returns {*} result of the computation\n */\n\nfunction compose() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  return fns.reduce((f, g) => function () {\n    return f(g(...arguments));\n  });\n}\n\nconst {\n  DOM_COMPONENT_INSTANCE_PROPERTY,\n  COMPONENTS_IMPLEMENTATION_MAP,\n  PLUGINS_SET\n} = globals;\n/**\n * Riot public api\n */\n\n/**\n * Register a custom tag by name\n * @param   {string} name - component name\n * @param   {Object} implementation - tag implementation\n * @returns {Map} map containing all the components implementations\n */\n\nfunction register(name, _ref) {\n  let {\n    css,\n    template,\n    exports\n  } = _ref;\n  if (COMPONENTS_IMPLEMENTATION_MAP.has(name)) panic(`The component \"${name}\" was already registered`);\n  COMPONENTS_IMPLEMENTATION_MAP.set(name, createComponent({\n    name,\n    css,\n    template,\n    exports\n  }));\n  return COMPONENTS_IMPLEMENTATION_MAP;\n}\n/**\n * Unregister a riot web component\n * @param   {string} name - component name\n * @returns {Map} map containing all the components implementations\n */\n\nfunction unregister(name) {\n  if (!COMPONENTS_IMPLEMENTATION_MAP.has(name)) panic(`The component \"${name}\" was never registered`);\n  COMPONENTS_IMPLEMENTATION_MAP.delete(name);\n  cssManager.remove(name);\n  return COMPONENTS_IMPLEMENTATION_MAP;\n}\n/**\n * Mounting function that will work only for the components that were globally registered\n * @param   {string|HTMLElement} selector - query for the selection or a DOM element\n * @param   {Object} initialProps - the initial component properties\n * @param   {string} name - optional component name\n * @returns {Array} list of riot components\n */\n\nfunction mount(selector, initialProps, name) {\n  return $(selector).map(element => mountComponent(element, initialProps, name));\n}\n/**\n * Sweet unmounting helper function for the DOM node mounted manually by the user\n * @param   {string|HTMLElement} selector - query for the selection or a DOM element\n * @param   {boolean|null} keepRootElement - if true keep the root element\n * @returns {Array} list of nodes unmounted\n */\n\nfunction unmount(selector, keepRootElement) {\n  return $(selector).map(element => {\n    if (element[DOM_COMPONENT_INSTANCE_PROPERTY]) {\n      element[DOM_COMPONENT_INSTANCE_PROPERTY].unmount(keepRootElement);\n    }\n\n    return element;\n  });\n}\n/**\n * Define a riot plugin\n * @param   {Function} plugin - function that will receive all the components created\n * @returns {Set} the set containing all the plugins installed\n */\n\nfunction install(plugin) {\n  if (!isFunction(plugin)) panic('Plugins must be of type function');\n  if (PLUGINS_SET.has(plugin)) panic('This plugin was already installed');\n  PLUGINS_SET.add(plugin);\n  return PLUGINS_SET;\n}\n/**\n * Uninstall a riot plugin\n * @param   {Function} plugin - plugin previously installed\n * @returns {Set} the set containing all the plugins installed\n */\n\nfunction uninstall(plugin) {\n  if (!PLUGINS_SET.has(plugin)) panic('This plugin was never installed');\n  PLUGINS_SET.delete(plugin);\n  return PLUGINS_SET;\n}\n/**\n * Helper method to create component without relying on the registered ones\n * @param   {Object} implementation - component implementation\n * @returns {Function} function that will allow you to mount a riot component on a DOM node\n */\n\nfunction component(implementation) {\n  return function (el, props, _temp) {\n    let {\n      slots,\n      attributes,\n      parentScope\n    } = _temp === void 0 ? {} : _temp;\n    return compose(c => c.mount(el, parentScope), c => c({\n      props,\n      slots,\n      attributes\n    }), createComponent)(implementation);\n  };\n}\n/**\n * Lift a riot component Interface into a pure riot object\n * @param   {Function} func - RiotPureComponent factory function\n * @returns {Function} the lifted original function received as argument\n */\n\nfunction pure(func) {\n  if (!isFunction(func)) panic('riot.pure accepts only arguments of type \"function\"');\n  func[IS_PURE_SYMBOL] = true;\n  return func;\n}\n/**\n * no-op function needed to add the proper types to your component via typescript\n * @param {Function|Object} component - component default export\n * @returns {Function|Object} returns exactly what it has received\n */\n\nconst withTypes = component => component;\n/** @type {string} current riot version */\n\nconst version = 'v6.0.2'; // expose some internal stuff that might be used from external tools\n\nconst __ = {\n  cssManager,\n  DOMBindings,\n  createComponent,\n  defineComponent,\n  globals\n};\n\nexport { __, component, install, mount, pure, register, uninstall, unmount, unregister, version, withTypes };\n","var map = {\n\t\"./hash-container/hash-container.riot\": 327,\n\t\"./hash-element/hash-element.riot\": 923,\n\t\"./hash-row/hash-row.riot\": 381,\n\t\"./sidebar/sidebar.riot\": 576\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 329;","import { register } from 'riot'\n\nconst basename = (path, extension = '') => path.split('/').reverse()[0].replace(extension, '')\nconst globalComponentsContext = require.context('./components/global/', true, /[a-zA-Z0-9-]+\\.riot/)\n\nexport default () => {\n  globalComponentsContext.keys().map(path => {\n    const name = basename(path, '.riot')\n\n    const component = globalComponentsContext(path)\n    register(name, component.default || component);\n\n    return {\n      name,\n      component\n    }\n  })\n}\n","import './style.css'\nimport '@riotjs/hot-reload'\nimport { mount } from 'riot'\nimport registerGlobalComponents from './register-global-components'\n\n// register\nregisterGlobalComponents()\n\n// mount all the global components found in this page\nmount('[data-riot-component]')\n"],"names":["exports","riot","$","_interopDefaultLegacy","e","$__default","cssManager","__","DOM_COMPONENT_INSTANCE_PROPERTY","globals","reload","componentAPI","name","map","el","oldTag","unmount","remove","newTag","component","props","update","state","console","warn","default","Object","defineProperty","value","factory","components","HashRow","hashArray","hashLength","newItemValue","getHashValue","newKey","arrayLength","this","checked","length","hashValue","x","charCodeAt","log","onBeforeMount","i","push","fieldEdit","keyCode","preventDefault","addValue","target","newHashValue","newItem","key","DOMPurify","sanitize","Math","floor","random","tableReset","index","row","elementKey","elementValue","testList","HashElement","elements","rowContent","addElement","item","User","showUser","toggleUser","selector","ctx","els","document","querySelectorAll","Array","isArray","test","prototype","toString","call","from","normalizeUrl","srcByModuleId","create","noDocument","forEach","noop","updateCss","url","href","split","isUrlRequest","isLoaded","indexOf","visited","newEl","cloneNode","addEventListener","parentNode","removeChild","concat","Date","now","nextSibling","insertBefore","appendChild","reloadAll","module","moduleId","options","fn","timeout","getScriptSrc","src","currentScript","scripts","getElementsByTagName","lastScriptTag","fileMap","splitResult","filename","mapRule","reg","RegExp","replace","getCurrentScriptUrl","reloaded","loaded","ret","stripWWW","some","getReloadUrl","reloadStyle","locals","join","self","args","arguments","functionCall","apply","clearTimeout","setTimeout","urlString","trim","protocol","host","toLowerCase","reduce","accumulator","pop","cssReload","id","hot","dispose","accept","undefined","dashToCamelCase","string","_","c","toUpperCase","moveChildren","source","firstChild","cleanNode","node","clearChildren","childNodes","children","newNode","refNode","COMPONENTS_IMPLEMENTATION_MAP$1","Map","DOM_COMPONENT_INSTANCE_PROPERTY$1","Symbol","PLUGINS_SET$1","Set","IS_DIRECTIVE","MOUNT_METHOD_KEY","UPDATE_METHOD_KEY","UNMOUNT_METHOD_KEY","SHOULD_UPDATE_KEY","ON_BEFORE_MOUNT_KEY","ON_MOUNTED_KEY","ON_BEFORE_UPDATE_KEY","ON_UPDATED_KEY","ON_BEFORE_UNMOUNT_KEY","ON_UNMOUNTED_KEY","PROPS_KEY","STATE_KEY","SLOTS_KEY","ROOT_KEY","IS_PURE_SYMBOL","IS_COMPONENT_UPDATING","PARENT_KEY_SYMBOL","ATTRIBUTES_KEY_SYMBOL","TEMPLATE_KEY_SYMBOL","freeze","__proto__","COMPONENTS_IMPLEMENTATION_MAP","PLUGINS_SET","VALUE_ATTRIBUTE","bindingTypes","EACH","IF","SIMPLE","TAG","SLOT","expressionTypes","ATTRIBUTE","EVENT","TEXT","VALUE","HEAD_SYMBOL","TAIL_SYMBOL","assign","enumerable","writable","configurable","defineProperties","properties","entries","_ref","defineDefaults","defaults","_ref2","getFragmentChildren","head","tail","nodes","walkNodes","n","check","isFilterActive","checkType","element","type","isSvg","owner","ownerSVGElement","isTemplate","tagName","isFunction","isObject","isNil","constructor","UNMOUNT_SCOPE","EachBinding","mount","scope","parentScope","placeholder","childrenMap","collection","evaluate","items","newChildrenMap","batches","futureNodes","binding","condition","template","itemName","getKey","indexName","root","isTemplateTag","context","extendScope","oldItem","get","mustFilterItem","mustMount","componentTemplate","clone","meta","fragment","dom","createTextNode","createHeadTailPlaceholders","avoidDOMInjection","createTemplateMeta","delete","set","createPatch","a","b","before","bLength","aEnd","bEnd","aStart","bStart","has","sequence","replaced","replaceChild","udomdiff","redundant","info","patch","values","first","last","markEdgeNodes","IfBinding","mustUnmount","pristine","panic","message","Error","memoize","cache","cached","val","evaluateAttributeExpressions","attributes","acc","attribute","ElementProto","Element","isNativeHtmlProperty","hasOwnProperty","RE_EVENTS_PREFIX","EventListener","handleEvent","event","ListenersWeakMap","WeakMap","normalizeStringValue","getTextNode","childNodeIndex","nodeType","Node","COMMENT_NODE","textNode","expressions","attributeExpression","oldValue","newAttributes","oldAttributes","newKeys","keys","filter","includes","removeAttribute","removeAllAttributes","setAllAttributes","isBoolean","shouldRemoveAttribute","canRenderAttribute","setAttribute","normalizeValue","normalizedEventName","eventListener","listener","createListener","callback","getCallbackAndOptions","handler","mustAddEvent","removeEventListener","data","expression","Expression","create$4","getRealParent","SlotBinding","getTemplateScope","attr","extendParentScope","templateData","slots","find","realParent","html","bindings","createDOM","moveSlotInnerContent","mustRemoveRoot","slot","child","slotBindings","TagBinding","tag","slotsToMarkup","getTag","getComponent","keepRootTag","method","fixTextExpressionsOffset","textExpressionsOffset","create$1","templateTagOffset","redundantAttribute","querySelector","bindingExpressions","injectDOM","TemplateChunk","container","ownerDocument","importNode","window","DOMParser","parseFromString","documentElement","createSVGTree","createElement","innerHTML","content","createHTMLTree","createDOMTree","createTemplateDOM","createDocumentFragment","siblings","max","getTemplateTagOffset","bindingsData","DOMBindings","createBinding","createExpression","callOrAssign","domToArray","normalize","attrs","prop","CSS_BY_NAME","style","add","css","inject","curry","_len","_key","_len2","_key2","getName","names","parseNodes","COMPONENT_CORE_HELPERS","$$","PURE_COMPONENT_API","COMPONENT_LIFECYCLE_METHODS","MOCKED_TEMPLATE_INTERFACE","memoizedCreateComponent","createComponent","bindDOMNodeToComponentObject","createCoreAPIMethods","mapFunction","componentWrapper","templateFn","_ref4","createSubcomponents","componentTemplateFactory","pureFactoryFunction","createPureComponent","defineComponent","preserveRoot","_ref3","enhanceComponentAPI","computeState","oldState","newState","_ref5","runPlugins","createAttributeBindings","initialProps","DOMattributesToObject","evaluateInitialProps","addCssHook","newProps","bind","register","unregister","componentName","mountComponent","keepRootElement","install","plugin","uninstall","implementation","_temp","fns","f","g","compose","pure","func","withTypes","version","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","resolve","globalComponentsContext","path","extension","reverse","basename"],"sourceRoot":""}